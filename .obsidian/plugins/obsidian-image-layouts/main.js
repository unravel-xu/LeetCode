"use strict";var L=Object.defineProperty;var T=(e,n,r)=>n in e?L(e,n,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[n]=r;var O=(e,n,r)=>(T(e,typeof n!="symbol"?n+"":n,r),r);const obsidian=require("obsidian"),require$$0=require("fs"),__uno="";function noop(){}function assign$1(e,n){for(const r in n)e[r]=n[r];return e}function run(e){return e()}function blank_object(){return Object.create(null)}function run_all(e){e.forEach(run)}function is_function(e){return typeof e=="function"}function safe_not_equal(e,n){return e!=e?n==n:e!==n||e&&typeof e=="object"||typeof e=="function"}let src_url_equal_anchor;function src_url_equal(e,n){return e===n?!0:(src_url_equal_anchor||(src_url_equal_anchor=document.createElement("a")),src_url_equal_anchor.href=n,e===src_url_equal_anchor.href)}function is_empty(e){return Object.keys(e).length===0}function create_slot(e,n,r,t){if(e){const o=get_slot_context(e,n,r,t);return e[0](o)}}function get_slot_context(e,n,r,t){return e[1]&&t?assign$1(r.ctx.slice(),e[1](t(n))):r.ctx}function get_slot_changes(e,n,r,t){if(e[2]&&t){const o=e[2](t(r));if(n.dirty===void 0)return o;if(typeof o=="object"){const a=[],l=Math.max(n.dirty.length,o.length);for(let c=0;c<l;c+=1)a[c]=n.dirty[c]|o[c];return a}return n.dirty|o}return n.dirty}function update_slot_base(e,n,r,t,o,a){if(o){const l=get_slot_context(n,r,t,a);e.p(l,o)}}function get_all_dirty_from_scope(e){if(e.ctx.length>32){const n=[],r=e.ctx.length/32;for(let t=0;t<r;t++)n[t]=-1;return n}return-1}function null_to_empty(e){return e??""}function append(e,n){e.appendChild(n)}function insert(e,n,r){e.insertBefore(n,r||null)}function detach(e){e.parentNode&&e.parentNode.removeChild(e)}function destroy_each(e,n){for(let r=0;r<e.length;r+=1)e[r]&&e[r].d(n)}function element(e){return document.createElement(e)}function svg_element(e){return document.createElementNS("http://www.w3.org/2000/svg",e)}function text(e){return document.createTextNode(e)}function space(){return text(" ")}function empty(){return text("")}function listen(e,n,r,t){return e.addEventListener(n,r,t),()=>e.removeEventListener(n,r,t)}function attr(e,n,r){r==null?e.removeAttribute(n):e.getAttribute(n)!==r&&e.setAttribute(n,r)}function children(e){return Array.from(e.childNodes)}function set_data(e,n){n=""+n,e.data!==n&&(e.data=n)}function toggle_class(e,n,r){e.classList.toggle(n,!!r)}function custom_event(e,n,{bubbles:r=!1,cancelable:t=!1}={}){return new CustomEvent(e,{detail:n,bubbles:r,cancelable:t})}let current_component;function set_current_component(e){current_component=e}function get_current_component(){if(!current_component)throw new Error("Function called outside component initialization");return current_component}function createEventDispatcher(){const e=get_current_component();return(n,r,{cancelable:t=!1}={})=>{const o=e.$$.callbacks[n];if(o){const a=custom_event(n,r,{cancelable:t});return o.slice().forEach(l=>{l.call(e,a)}),!a.defaultPrevented}return!0}}function bubble(e,n){const r=e.$$.callbacks[n.type];r&&r.slice().forEach(t=>t.call(this,n))}const dirty_components=[],binding_callbacks=[];let render_callbacks=[];const flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function add_render_callback(e){render_callbacks.push(e)}const seen_callbacks=new Set;let flushidx=0;function flush(){if(flushidx!==0)return;const e=current_component;do{try{for(;flushidx<dirty_components.length;){const n=dirty_components[flushidx];flushidx++,set_current_component(n),update(n.$$)}}catch(n){throw dirty_components.length=0,flushidx=0,n}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let n=0;n<render_callbacks.length;n+=1){const r=render_callbacks[n];seen_callbacks.has(r)||(seen_callbacks.add(r),r())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(e)}function update(e){if(e.fragment!==null){e.update(),run_all(e.before_update);const n=e.dirty;e.dirty=[-1],e.fragment&&e.fragment.p(e.ctx,n),e.after_update.forEach(add_render_callback)}}function flush_render_callbacks(e){const n=[],r=[];render_callbacks.forEach(t=>e.indexOf(t)===-1?n.push(t):r.push(t)),r.forEach(t=>t()),render_callbacks=n}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(e,n){e&&e.i&&(outroing.delete(e),e.i(n))}function transition_out(e,n,r,t){if(e&&e.o){if(outroing.has(e))return;outroing.add(e),outros.c.push(()=>{outroing.delete(e),t&&(r&&e.d(1),t())}),e.o(n)}else t&&t()}function ensure_array_like(e){return(e==null?void 0:e.length)!==void 0?e:Array.from(e)}function outro_and_destroy_block(e,n){transition_out(e,1,1,()=>{n.delete(e.key)})}function update_keyed_each(e,n,r,t,o,a,l,c,s,u,f,p){let d=e.length,m=a.length,_=d;const g={};for(;_--;)g[e[_].key]=_;const h=[],v=new Map,w=new Map,y=[];for(_=m;_--;){const E=p(o,a,_),A=r(E);let b=l.get(A);b?t&&y.push(()=>b.p(E,n)):(b=u(A,E),b.c()),v.set(A,h[_]=b),A in g&&w.set(A,Math.abs(_-g[A]))}const x=new Set,S=new Set;function k(E){transition_in(E,1),E.m(c,f),l.set(E.key,E),f=E.first,m--}for(;d&&m;){const E=h[m-1],A=e[d-1],b=E.key,C=A.key;E===A?(f=E.first,d--,m--):v.has(C)?!l.has(b)||x.has(b)?k(E):S.has(C)?d--:w.get(b)>w.get(C)?(S.add(b),k(E)):(x.add(C),d--):(s(A,l),d--)}for(;d--;){const E=e[d];v.has(E.key)||s(E,l)}for(;m;)k(h[m-1]);return run_all(y),h}function create_component(e){e&&e.c()}function mount_component(e,n,r){const{fragment:t,after_update:o}=e.$$;t&&t.m(n,r),add_render_callback(()=>{const a=e.$$.on_mount.map(run).filter(is_function);e.$$.on_destroy?e.$$.on_destroy.push(...a):run_all(a),e.$$.on_mount=[]}),o.forEach(add_render_callback)}function destroy_component(e,n){const r=e.$$;r.fragment!==null&&(flush_render_callbacks(r.after_update),run_all(r.on_destroy),r.fragment&&r.fragment.d(n),r.on_destroy=r.fragment=null,r.ctx=[])}function make_dirty(e,n){e.$$.dirty[0]===-1&&(dirty_components.push(e),schedule_update(),e.$$.dirty.fill(0)),e.$$.dirty[n/31|0]|=1<<n%31}function init(e,n,r,t,o,a,l=null,c=[-1]){const s=current_component;set_current_component(e);const u=e.$$={fragment:null,ctx:[],props:a,update:noop,not_equal:o,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(n.context||(s?s.$$.context:[])),callbacks:blank_object(),dirty:c,skip_bound:!1,root:n.target||s.$$.root};l&&l(u.root);let f=!1;if(u.ctx=r?r(e,n.props||{},(p,d,...m)=>{const _=m.length?m[0]:d;return u.ctx&&o(u.ctx[p],u.ctx[p]=_)&&(!u.skip_bound&&u.bound[p]&&u.bound[p](_),f&&make_dirty(e,p)),d}):[],u.update(),f=!0,run_all(u.before_update),u.fragment=t?t(u.ctx):!1,n.target){if(n.hydrate){const p=children(n.target);u.fragment&&u.fragment.l(p),p.forEach(detach)}else u.fragment&&u.fragment.c();n.intro&&transition_in(e.$$.fragment),mount_component(e,n.target,n.anchor),flush()}set_current_component(s)}class SvelteComponent{constructor(){O(this,"$$");O(this,"$$set")}$destroy(){destroy_component(this,1),this.$destroy=noop}$on(n,r){if(!is_function(r))return noop;const t=this.$$.callbacks[n]||(this.$$.callbacks[n]=[]);return t.push(r),()=>{const o=t.indexOf(r);o!==-1&&t.splice(o,1)}}$set(n){this.$$set&&!is_empty(n)&&(this.$$.skip_bound=!0,this.$$set(n),this.$$.skip_bound=!1)}}const PUBLIC_VERSION="4";typeof window<"u"&&(window.__svelte||(window.__svelte={v:new Set})).v.add(PUBLIC_VERSION);const LegacyGridImage_svelte_svelte_type_style_lang="";function create_if_block$4(e){let n,r,t;return{c(){n=element("div"),r=element("div"),t=text(e[1]),attr(r,"class","w-full rounded-md bg-white bg-opacity-75 px-4 py-2 text-center text-sm font-medium text-gray-900 backdrop-blur backdrop-filter"),attr(n,"class","absolute bottom-0 left-0 right-0 flex items-end p-4"),attr(n,"aria-hidden","true"),toggle_class(n,"opacity-0",!e[3]),toggle_class(n,"group-hover:opacity-100",!e[3])},m(o,a){insert(o,n,a),append(n,r),append(r,t)},p(o,a){a&2&&set_data(t,o[1]),a&8&&toggle_class(n,"opacity-0",!o[3]),a&8&&toggle_class(n,"group-hover:opacity-100",!o[3])},d(o){o&&detach(n)}}}function create_fragment$b(e){let n,r,t,o,a,l=e[1]&&create_if_block$4(e);return{c(){n=element("div"),r=element("img"),o=space(),l&&l.c(),attr(r,"class","w-full h-full object-cover object-center"),src_url_equal(r.src,t=e[0])||attr(r,"src",t),attr(r,"alt",e[1]),attr(n,"class",a=null_to_empty(`group relative image-layouts-image-${e[2]}`)+" svelte-1jhxzuo")},m(c,s){insert(c,n,s),append(n,r),append(n,o),l&&l.m(n,null)},p(c,[s]){s&1&&!src_url_equal(r.src,t=c[0])&&attr(r,"src",t),s&2&&attr(r,"alt",c[1]),c[1]?l?l.p(c,s):(l=create_if_block$4(c),l.c(),l.m(n,null)):l&&(l.d(1),l=null),s&4&&a!==(a=null_to_empty(`group relative image-layouts-image-${c[2]}`)+" svelte-1jhxzuo")&&attr(n,"class",a)},i:noop,o:noop,d(c){c&&detach(n),l&&l.d()}}}function instance$b(e,n,r){let{src:t}=n,{description:o}=n,{index:a}=n,{permanentOverlay:l=!1}=n;return e.$$set=c=>{"src"in c&&r(0,t=c.src),"description"in c&&r(1,o=c.description),"index"in c&&r(2,a=c.index),"permanentOverlay"in c&&r(3,l=c.permanentOverlay)},[t,o,a,l]}class LegacyGridImage extends SvelteComponent{constructor(n){super(),init(this,n,instance$b,create_fragment$b,safe_not_equal,{src:0,description:1,index:2,permanentOverlay:3})}}function create_if_block$3(e){let n,r;return{c(){n=element("div"),r=text(e[0]),attr(n,"class","text-center text-xs text-gray-800 my-2")},m(t,o){insert(t,n,o),append(n,r)},p(t,o){o&1&&set_data(r,t[0])},d(t){t&&detach(n)}}}function create_fragment$a(e){let n,r=e[0]&&e[0]!==""&&create_if_block$3(e);return{c(){r&&r.c(),n=empty()},m(t,o){r&&r.m(t,o),insert(t,n,o)},p(t,[o]){t[0]&&t[0]!==""?r?r.p(t,o):(r=create_if_block$3(t),r.c(),r.m(n.parentNode,n)):r&&(r.d(1),r=null)},i:noop,o:noop,d(t){t&&detach(n),r&&r.d(t)}}}function instance$a(e,n,r){let{caption:t=""}=n;return e.$$set=o=>{"caption"in o&&r(0,t=o.caption)},[t]}class Caption extends SvelteComponent{constructor(n){super(),init(this,n,instance$a,create_fragment$a,safe_not_equal,{caption:0})}}const LegacyImageLayout_svelte_svelte_type_style_lang="";function get_each_context$2(e,n,r){const t=e.slice();return t[7]=n[r],t[9]=r,t}function create_each_block$2(e,n){let r,t,o;return t=new LegacyGridImage({props:{index:n[9],src:n[7].link,description:n[2][n[9]]??n[7].alt??`Image ${n[9]+1}`,permanentOverlay:n[3]}}),{key:e,first:null,c(){r=empty(),create_component(t.$$.fragment),this.first=r},m(a,l){insert(a,r,l),mount_component(t,a,l),o=!0},p(a,l){n=a;const c={};l&16&&(c.index=n[9]),l&16&&(c.src=n[7].link),l&20&&(c.description=n[2][n[9]]??n[7].alt??`Image ${n[9]+1}`),l&8&&(c.permanentOverlay=n[3]),t.$set(c)},i(a){o||(transition_in(t.$$.fragment,a),o=!0)},o(a){transition_out(t.$$.fragment,a),o=!1},d(a){a&&detach(r),destroy_component(t,a)}}}function create_fragment$9(e){let n,r=[],t=new Map,o,a,l,c,s=ensure_array_like(e[4]);const u=f=>f[7].link;for(let f=0;f<s.length;f+=1){let p=get_each_context$2(e,s,f),d=u(p);t.set(d,r[f]=create_each_block$2(d,p))}return l=new Caption({props:{caption:e[1]}}),{c(){n=element("div");for(let f=0;f<r.length;f+=1)r[f].c();a=space(),create_component(l.$$.fragment),attr(n,"class",o=null_to_empty(`image-layouts image-layouts-grid image-layouts-layout-${e[0]} cursor-default`)+" svelte-270mav")},m(f,p){insert(f,n,p);for(let d=0;d<r.length;d+=1)r[d]&&r[d].m(n,null);insert(f,a,p),mount_component(l,f,p),c=!0},p(f,[p]){p&28&&(s=ensure_array_like(f[4]),group_outros(),r=update_keyed_each(r,p,u,1,f,s,t,n,outro_and_destroy_block,create_each_block$2,null,get_each_context$2),check_outros()),(!c||p&1&&o!==(o=null_to_empty(`image-layouts image-layouts-grid image-layouts-layout-${f[0]} cursor-default`)+" svelte-270mav"))&&attr(n,"class",o);const d={};p&2&&(d.caption=f[1]),l.$set(d)},i(f){if(!c){for(let p=0;p<s.length;p+=1)transition_in(r[p]);transition_in(l.$$.fragment,f),c=!0}},o(f){for(let p=0;p<r.length;p+=1)transition_out(r[p]);transition_out(l.$$.fragment,f),c=!1},d(f){f&&(detach(n),detach(a));for(let p=0;p<r.length;p+=1)r[p].d();destroy_component(l,f)}}}function instance$9(e,n,r){let{layout:t="a"}=n,{images:o=[]}=n,{requiredImages:a=0}=n,{caption:l=""}=n,{descriptions:c=[]}=n,{permanentOverlay:s=!1}=n,u=[];return o.length<a?u=[...o,...Array(a-o.length).fill({type:"external",link:"https://via.placeholder.com/640x480"})]:u=o.slice(0,a),e.$$set=f=>{"layout"in f&&r(0,t=f.layout),"images"in f&&r(5,o=f.images),"requiredImages"in f&&r(6,a=f.requiredImages),"caption"in f&&r(1,l=f.caption),"descriptions"in f&&r(2,c=f.descriptions),"permanentOverlay"in f&&r(3,s=f.permanentOverlay)},[t,l,c,s,u,o,a]}class LegacyImageLayout extends SvelteComponent{constructor(n){super(),init(this,n,instance$9,create_fragment$9,safe_not_equal,{layout:0,images:5,requiredImages:6,caption:1,descriptions:2,permanentOverlay:3})}}const layoutImages={a:2,b:2,c:2,d:3,e:3,f:4,g:4,h:3,i:4,single:1},regexWiki=/\[\[([^\]]+)\]\]/,regexParenthesis=/\((.*?)\)/,regexBrackets=/\[(.*?)\]/,regexWikiGlobal=/\[\[([^\]]*)\]\]/g,regexMdGlobal=/\[([^\]]*)\]\(([^\(]*)\)/g,getImageFromLine=e=>{var n,r,t;if(e.match(regexMdGlobal)){const o=(n=e.match(regexParenthesis))==null?void 0:n[1],a=(r=e.match(regexBrackets))==null?void 0:r[1];if(o)return o.toLowerCase().startsWith("http")?{type:"external",link:o,alt:a}:{type:"wiki",link:o,alt:a}}else if(e.match(regexWikiGlobal)){const o=(t=e.match(regexWiki))==null?void 0:t[1];if(o)return{type:"wiki",link:o}}return null},getImages=e=>e.split(`
`).filter(t=>t.startsWith("!")).map(t=>getImageFromLine(t)).filter(t=>t!==null);function resolveLocalImages(e,n,r){return e.map(t=>{if(t.type==="wiki"){const o=r.app.metadataCache.getFirstLinkpathDest(t.link,n.sourcePath);if(o)return{type:"resolved",link:r.app.vault.adapter.getResourcePath(o.path)}}return t})}function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var frontMatter={exports:{}},jsYaml$1={},loader$1={},common$6={};function isNothing(e){return typeof e>"u"||e===null}function isObject$1(e){return typeof e=="object"&&e!==null}function toArray(e){return Array.isArray(e)?e:isNothing(e)?[]:[e]}function extend$1(e,n){var r,t,o,a;if(n)for(a=Object.keys(n),r=0,t=a.length;r<t;r+=1)o=a[r],e[o]=n[o];return e}function repeat(e,n){var r="",t;for(t=0;t<n;t+=1)r+=e;return r}function isNegativeZero(e){return e===0&&Number.NEGATIVE_INFINITY===1/e}common$6.isNothing=isNothing;common$6.isObject=isObject$1;common$6.toArray=toArray;common$6.repeat=repeat;common$6.isNegativeZero=isNegativeZero;common$6.extend=extend$1;function YAMLException$4(e,n){Error.call(this),this.name="YAMLException",this.reason=e,this.mark=n,this.message=(this.reason||"(unknown reason)")+(this.mark?" "+this.mark.toString():""),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack||""}YAMLException$4.prototype=Object.create(Error.prototype);YAMLException$4.prototype.constructor=YAMLException$4;YAMLException$4.prototype.toString=function(n){var r=this.name+": ";return r+=this.reason||"(unknown reason)",!n&&this.mark&&(r+=" "+this.mark.toString()),r};var exception=YAMLException$4,common$5=common$6;function Mark$1(e,n,r,t,o){this.name=e,this.buffer=n,this.position=r,this.line=t,this.column=o}Mark$1.prototype.getSnippet=function(n,r){var t,o,a,l,c;if(!this.buffer)return null;for(n=n||4,r=r||75,t="",o=this.position;o>0&&`\0\r
\u2028\u2029`.indexOf(this.buffer.charAt(o-1))===-1;)if(o-=1,this.position-o>r/2-1){t=" ... ",o+=5;break}for(a="",l=this.position;l<this.buffer.length&&`\0\r
\u2028\u2029`.indexOf(this.buffer.charAt(l))===-1;)if(l+=1,l-this.position>r/2-1){a=" ... ",l-=5;break}return c=this.buffer.slice(o,l),common$5.repeat(" ",n)+t+c+a+`
`+common$5.repeat(" ",n+this.position-o+t.length)+"^"};Mark$1.prototype.toString=function(n){var r,t="";return this.name&&(t+='in "'+this.name+'" '),t+="at line "+(this.line+1)+", column "+(this.column+1),n||(r=this.getSnippet(),r&&(t+=`:
`+r)),t};var mark=Mark$1,YAMLException$3=exception,TYPE_CONSTRUCTOR_OPTIONS=["kind","resolve","construct","instanceOf","predicate","represent","defaultStyle","styleAliases"],YAML_NODE_KINDS=["scalar","sequence","mapping"];function compileStyleAliases(e){var n={};return e!==null&&Object.keys(e).forEach(function(r){e[r].forEach(function(t){n[String(t)]=r})}),n}function Type$h(e,n){if(n=n||{},Object.keys(n).forEach(function(r){if(TYPE_CONSTRUCTOR_OPTIONS.indexOf(r)===-1)throw new YAMLException$3('Unknown option "'+r+'" is met in definition of "'+e+'" YAML type.')}),this.tag=e,this.kind=n.kind||null,this.resolve=n.resolve||function(){return!0},this.construct=n.construct||function(r){return r},this.instanceOf=n.instanceOf||null,this.predicate=n.predicate||null,this.represent=n.represent||null,this.defaultStyle=n.defaultStyle||null,this.styleAliases=compileStyleAliases(n.styleAliases||null),YAML_NODE_KINDS.indexOf(this.kind)===-1)throw new YAMLException$3('Unknown kind "'+this.kind+'" is specified for "'+e+'" YAML type.')}var type=Type$h,common$4=common$6,YAMLException$2=exception,Type$g=type;function compileList(e,n,r){var t=[];return e.include.forEach(function(o){r=compileList(o,n,r)}),e[n].forEach(function(o){r.forEach(function(a,l){a.tag===o.tag&&a.kind===o.kind&&t.push(l)}),r.push(o)}),r.filter(function(o,a){return t.indexOf(a)===-1})}function compileMap(){var e={scalar:{},sequence:{},mapping:{},fallback:{}},n,r;function t(o){e[o.kind][o.tag]=e.fallback[o.tag]=o}for(n=0,r=arguments.length;n<r;n+=1)arguments[n].forEach(t);return e}function Schema$5(e){this.include=e.include||[],this.implicit=e.implicit||[],this.explicit=e.explicit||[],this.implicit.forEach(function(n){if(n.loadKind&&n.loadKind!=="scalar")throw new YAMLException$2("There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.")}),this.compiledImplicit=compileList(this,"implicit",[]),this.compiledExplicit=compileList(this,"explicit",[]),this.compiledTypeMap=compileMap(this.compiledImplicit,this.compiledExplicit)}Schema$5.DEFAULT=null;Schema$5.create=function(){var n,r;switch(arguments.length){case 1:n=Schema$5.DEFAULT,r=arguments[0];break;case 2:n=arguments[0],r=arguments[1];break;default:throw new YAMLException$2("Wrong number of arguments for Schema.create function")}if(n=common$4.toArray(n),r=common$4.toArray(r),!n.every(function(t){return t instanceof Schema$5}))throw new YAMLException$2("Specified list of super schemas (or a single Schema object) contains a non-Schema object.");if(!r.every(function(t){return t instanceof Type$g}))throw new YAMLException$2("Specified list of YAML types (or a single Type object) contains a non-Type object.");return new Schema$5({include:n,explicit:r})};var schema=Schema$5,Type$f=type,str=new Type$f("tag:yaml.org,2002:str",{kind:"scalar",construct:function(e){return e!==null?e:""}}),Type$e=type,seq=new Type$e("tag:yaml.org,2002:seq",{kind:"sequence",construct:function(e){return e!==null?e:[]}}),Type$d=type,map=new Type$d("tag:yaml.org,2002:map",{kind:"mapping",construct:function(e){return e!==null?e:{}}}),Schema$4=schema,failsafe=new Schema$4({explicit:[str,seq,map]}),Type$c=type;function resolveYamlNull(e){if(e===null)return!0;var n=e.length;return n===1&&e==="~"||n===4&&(e==="null"||e==="Null"||e==="NULL")}function constructYamlNull(){return null}function isNull(e){return e===null}var _null=new Type$c("tag:yaml.org,2002:null",{kind:"scalar",resolve:resolveYamlNull,construct:constructYamlNull,predicate:isNull,represent:{canonical:function(){return"~"},lowercase:function(){return"null"},uppercase:function(){return"NULL"},camelcase:function(){return"Null"}},defaultStyle:"lowercase"}),Type$b=type;function resolveYamlBoolean(e){if(e===null)return!1;var n=e.length;return n===4&&(e==="true"||e==="True"||e==="TRUE")||n===5&&(e==="false"||e==="False"||e==="FALSE")}function constructYamlBoolean(e){return e==="true"||e==="True"||e==="TRUE"}function isBoolean(e){return Object.prototype.toString.call(e)==="[object Boolean]"}var bool=new Type$b("tag:yaml.org,2002:bool",{kind:"scalar",resolve:resolveYamlBoolean,construct:constructYamlBoolean,predicate:isBoolean,represent:{lowercase:function(e){return e?"true":"false"},uppercase:function(e){return e?"TRUE":"FALSE"},camelcase:function(e){return e?"True":"False"}},defaultStyle:"lowercase"}),common$3=common$6,Type$a=type;function isHexCode(e){return 48<=e&&e<=57||65<=e&&e<=70||97<=e&&e<=102}function isOctCode(e){return 48<=e&&e<=55}function isDecCode(e){return 48<=e&&e<=57}function resolveYamlInteger(e){if(e===null)return!1;var n=e.length,r=0,t=!1,o;if(!n)return!1;if(o=e[r],(o==="-"||o==="+")&&(o=e[++r]),o==="0"){if(r+1===n)return!0;if(o=e[++r],o==="b"){for(r++;r<n;r++)if(o=e[r],o!=="_"){if(o!=="0"&&o!=="1")return!1;t=!0}return t&&o!=="_"}if(o==="x"){for(r++;r<n;r++)if(o=e[r],o!=="_"){if(!isHexCode(e.charCodeAt(r)))return!1;t=!0}return t&&o!=="_"}for(;r<n;r++)if(o=e[r],o!=="_"){if(!isOctCode(e.charCodeAt(r)))return!1;t=!0}return t&&o!=="_"}if(o==="_")return!1;for(;r<n;r++)if(o=e[r],o!=="_"){if(o===":")break;if(!isDecCode(e.charCodeAt(r)))return!1;t=!0}return!t||o==="_"?!1:o!==":"?!0:/^(:[0-5]?[0-9])+$/.test(e.slice(r))}function constructYamlInteger(e){var n=e,r=1,t,o,a=[];return n.indexOf("_")!==-1&&(n=n.replace(/_/g,"")),t=n[0],(t==="-"||t==="+")&&(t==="-"&&(r=-1),n=n.slice(1),t=n[0]),n==="0"?0:t==="0"?n[1]==="b"?r*parseInt(n.slice(2),2):n[1]==="x"?r*parseInt(n,16):r*parseInt(n,8):n.indexOf(":")!==-1?(n.split(":").forEach(function(l){a.unshift(parseInt(l,10))}),n=0,o=1,a.forEach(function(l){n+=l*o,o*=60}),r*n):r*parseInt(n,10)}function isInteger(e){return Object.prototype.toString.call(e)==="[object Number]"&&e%1===0&&!common$3.isNegativeZero(e)}var int=new Type$a("tag:yaml.org,2002:int",{kind:"scalar",resolve:resolveYamlInteger,construct:constructYamlInteger,predicate:isInteger,represent:{binary:function(e){return e>=0?"0b"+e.toString(2):"-0b"+e.toString(2).slice(1)},octal:function(e){return e>=0?"0"+e.toString(8):"-0"+e.toString(8).slice(1)},decimal:function(e){return e.toString(10)},hexadecimal:function(e){return e>=0?"0x"+e.toString(16).toUpperCase():"-0x"+e.toString(16).toUpperCase().slice(1)}},defaultStyle:"decimal",styleAliases:{binary:[2,"bin"],octal:[8,"oct"],decimal:[10,"dec"],hexadecimal:[16,"hex"]}}),common$2=common$6,Type$9=type,YAML_FLOAT_PATTERN=new RegExp("^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?|\\.[0-9_]+(?:[eE][-+]?[0-9]+)?|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\.[0-9_]*|[-+]?\\.(?:inf|Inf|INF)|\\.(?:nan|NaN|NAN))$");function resolveYamlFloat(e){return!(e===null||!YAML_FLOAT_PATTERN.test(e)||e[e.length-1]==="_")}function constructYamlFloat(e){var n,r,t,o;return n=e.replace(/_/g,"").toLowerCase(),r=n[0]==="-"?-1:1,o=[],"+-".indexOf(n[0])>=0&&(n=n.slice(1)),n===".inf"?r===1?Number.POSITIVE_INFINITY:Number.NEGATIVE_INFINITY:n===".nan"?NaN:n.indexOf(":")>=0?(n.split(":").forEach(function(a){o.unshift(parseFloat(a,10))}),n=0,t=1,o.forEach(function(a){n+=a*t,t*=60}),r*n):r*parseFloat(n,10)}var SCIENTIFIC_WITHOUT_DOT=/^[-+]?[0-9]+e/;function representYamlFloat(e,n){var r;if(isNaN(e))switch(n){case"lowercase":return".nan";case"uppercase":return".NAN";case"camelcase":return".NaN"}else if(Number.POSITIVE_INFINITY===e)switch(n){case"lowercase":return".inf";case"uppercase":return".INF";case"camelcase":return".Inf"}else if(Number.NEGATIVE_INFINITY===e)switch(n){case"lowercase":return"-.inf";case"uppercase":return"-.INF";case"camelcase":return"-.Inf"}else if(common$2.isNegativeZero(e))return"-0.0";return r=e.toString(10),SCIENTIFIC_WITHOUT_DOT.test(r)?r.replace("e",".e"):r}function isFloat(e){return Object.prototype.toString.call(e)==="[object Number]"&&(e%1!==0||common$2.isNegativeZero(e))}var float=new Type$9("tag:yaml.org,2002:float",{kind:"scalar",resolve:resolveYamlFloat,construct:constructYamlFloat,predicate:isFloat,represent:representYamlFloat,defaultStyle:"lowercase"}),Schema$3=schema,json=new Schema$3({include:[failsafe],implicit:[_null,bool,int,float]}),Schema$2=schema,core=new Schema$2({include:[json]}),Type$8=type,YAML_DATE_REGEXP=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9])-([0-9][0-9])$"),YAML_TIMESTAMP_REGEXP=new RegExp("^([0-9][0-9][0-9][0-9])-([0-9][0-9]?)-([0-9][0-9]?)(?:[Tt]|[ \\t]+)([0-9][0-9]?):([0-9][0-9]):([0-9][0-9])(?:\\.([0-9]*))?(?:[ \\t]*(Z|([-+])([0-9][0-9]?)(?::([0-9][0-9]))?))?$");function resolveYamlTimestamp(e){return e===null?!1:YAML_DATE_REGEXP.exec(e)!==null||YAML_TIMESTAMP_REGEXP.exec(e)!==null}function constructYamlTimestamp(e){var n,r,t,o,a,l,c,s=0,u=null,f,p,d;if(n=YAML_DATE_REGEXP.exec(e),n===null&&(n=YAML_TIMESTAMP_REGEXP.exec(e)),n===null)throw new Error("Date resolve error");if(r=+n[1],t=+n[2]-1,o=+n[3],!n[4])return new Date(Date.UTC(r,t,o));if(a=+n[4],l=+n[5],c=+n[6],n[7]){for(s=n[7].slice(0,3);s.length<3;)s+="0";s=+s}return n[9]&&(f=+n[10],p=+(n[11]||0),u=(f*60+p)*6e4,n[9]==="-"&&(u=-u)),d=new Date(Date.UTC(r,t,o,a,l,c,s)),u&&d.setTime(d.getTime()-u),d}function representYamlTimestamp(e){return e.toISOString()}var timestamp=new Type$8("tag:yaml.org,2002:timestamp",{kind:"scalar",resolve:resolveYamlTimestamp,construct:constructYamlTimestamp,instanceOf:Date,represent:representYamlTimestamp}),Type$7=type;function resolveYamlMerge(e){return e==="<<"||e===null}var merge=new Type$7("tag:yaml.org,2002:merge",{kind:"scalar",resolve:resolveYamlMerge});function commonjsRequire(e){throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var NodeBuffer;try{var _require$1=commonjsRequire;NodeBuffer=_require$1("buffer").Buffer}catch{}var Type$6=type,BASE64_MAP=`ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=
\r`;function resolveYamlBinary(e){if(e===null)return!1;var n,r,t=0,o=e.length,a=BASE64_MAP;for(r=0;r<o;r++)if(n=a.indexOf(e.charAt(r)),!(n>64)){if(n<0)return!1;t+=6}return t%8===0}function constructYamlBinary(e){var n,r,t=e.replace(/[\r\n=]/g,""),o=t.length,a=BASE64_MAP,l=0,c=[];for(n=0;n<o;n++)n%4===0&&n&&(c.push(l>>16&255),c.push(l>>8&255),c.push(l&255)),l=l<<6|a.indexOf(t.charAt(n));return r=o%4*6,r===0?(c.push(l>>16&255),c.push(l>>8&255),c.push(l&255)):r===18?(c.push(l>>10&255),c.push(l>>2&255)):r===12&&c.push(l>>4&255),NodeBuffer?NodeBuffer.from?NodeBuffer.from(c):new NodeBuffer(c):c}function representYamlBinary(e){var n="",r=0,t,o,a=e.length,l=BASE64_MAP;for(t=0;t<a;t++)t%3===0&&t&&(n+=l[r>>18&63],n+=l[r>>12&63],n+=l[r>>6&63],n+=l[r&63]),r=(r<<8)+e[t];return o=a%3,o===0?(n+=l[r>>18&63],n+=l[r>>12&63],n+=l[r>>6&63],n+=l[r&63]):o===2?(n+=l[r>>10&63],n+=l[r>>4&63],n+=l[r<<2&63],n+=l[64]):o===1&&(n+=l[r>>2&63],n+=l[r<<4&63],n+=l[64],n+=l[64]),n}function isBinary(e){return NodeBuffer&&NodeBuffer.isBuffer(e)}var binary=new Type$6("tag:yaml.org,2002:binary",{kind:"scalar",resolve:resolveYamlBinary,construct:constructYamlBinary,predicate:isBinary,represent:representYamlBinary}),Type$5=type,_hasOwnProperty$3=Object.prototype.hasOwnProperty,_toString$2=Object.prototype.toString;function resolveYamlOmap(e){if(e===null)return!0;var n=[],r,t,o,a,l,c=e;for(r=0,t=c.length;r<t;r+=1){if(o=c[r],l=!1,_toString$2.call(o)!=="[object Object]")return!1;for(a in o)if(_hasOwnProperty$3.call(o,a))if(!l)l=!0;else return!1;if(!l)return!1;if(n.indexOf(a)===-1)n.push(a);else return!1}return!0}function constructYamlOmap(e){return e!==null?e:[]}var omap=new Type$5("tag:yaml.org,2002:omap",{kind:"sequence",resolve:resolveYamlOmap,construct:constructYamlOmap}),Type$4=type,_toString$1=Object.prototype.toString;function resolveYamlPairs(e){if(e===null)return!0;var n,r,t,o,a,l=e;for(a=new Array(l.length),n=0,r=l.length;n<r;n+=1){if(t=l[n],_toString$1.call(t)!=="[object Object]"||(o=Object.keys(t),o.length!==1))return!1;a[n]=[o[0],t[o[0]]]}return!0}function constructYamlPairs(e){if(e===null)return[];var n,r,t,o,a,l=e;for(a=new Array(l.length),n=0,r=l.length;n<r;n+=1)t=l[n],o=Object.keys(t),a[n]=[o[0],t[o[0]]];return a}var pairs=new Type$4("tag:yaml.org,2002:pairs",{kind:"sequence",resolve:resolveYamlPairs,construct:constructYamlPairs}),Type$3=type,_hasOwnProperty$2=Object.prototype.hasOwnProperty;function resolveYamlSet(e){if(e===null)return!0;var n,r=e;for(n in r)if(_hasOwnProperty$2.call(r,n)&&r[n]!==null)return!1;return!0}function constructYamlSet(e){return e!==null?e:{}}var set=new Type$3("tag:yaml.org,2002:set",{kind:"mapping",resolve:resolveYamlSet,construct:constructYamlSet}),Schema$1=schema,default_safe=new Schema$1({include:[core],implicit:[timestamp,merge],explicit:[binary,omap,pairs,set]}),Type$2=type;function resolveJavascriptUndefined(){return!0}function constructJavascriptUndefined(){}function representJavascriptUndefined(){return""}function isUndefined(e){return typeof e>"u"}var _undefined=new Type$2("tag:yaml.org,2002:js/undefined",{kind:"scalar",resolve:resolveJavascriptUndefined,construct:constructJavascriptUndefined,predicate:isUndefined,represent:representJavascriptUndefined}),Type$1=type;function resolveJavascriptRegExp(e){if(e===null||e.length===0)return!1;var n=e,r=/\/([gim]*)$/.exec(e),t="";return!(n[0]==="/"&&(r&&(t=r[1]),t.length>3||n[n.length-t.length-1]!=="/"))}function constructJavascriptRegExp(e){var n=e,r=/\/([gim]*)$/.exec(e),t="";return n[0]==="/"&&(r&&(t=r[1]),n=n.slice(1,n.length-t.length-1)),new RegExp(n,t)}function representJavascriptRegExp(e){var n="/"+e.source+"/";return e.global&&(n+="g"),e.multiline&&(n+="m"),e.ignoreCase&&(n+="i"),n}function isRegExp(e){return Object.prototype.toString.call(e)==="[object RegExp]"}var regexp=new Type$1("tag:yaml.org,2002:js/regexp",{kind:"scalar",resolve:resolveJavascriptRegExp,construct:constructJavascriptRegExp,predicate:isRegExp,represent:representJavascriptRegExp}),esprima;try{var _require=commonjsRequire;esprima=_require("esprima")}catch{typeof window<"u"&&(esprima=window.esprima)}var Type=type;function resolveJavascriptFunction(e){if(e===null)return!1;try{var n="("+e+")",r=esprima.parse(n,{range:!0});return!(r.type!=="Program"||r.body.length!==1||r.body[0].type!=="ExpressionStatement"||r.body[0].expression.type!=="ArrowFunctionExpression"&&r.body[0].expression.type!=="FunctionExpression")}catch{return!1}}function constructJavascriptFunction(e){var n="("+e+")",r=esprima.parse(n,{range:!0}),t=[],o;if(r.type!=="Program"||r.body.length!==1||r.body[0].type!=="ExpressionStatement"||r.body[0].expression.type!=="ArrowFunctionExpression"&&r.body[0].expression.type!=="FunctionExpression")throw new Error("Failed to resolve function");return r.body[0].expression.params.forEach(function(a){t.push(a.name)}),o=r.body[0].expression.body.range,r.body[0].expression.body.type==="BlockStatement"?new Function(t,n.slice(o[0]+1,o[1]-1)):new Function(t,"return "+n.slice(o[0],o[1]))}function representJavascriptFunction(e){return e.toString()}function isFunction(e){return Object.prototype.toString.call(e)==="[object Function]"}var _function=new Type("tag:yaml.org,2002:js/function",{kind:"scalar",resolve:resolveJavascriptFunction,construct:constructJavascriptFunction,predicate:isFunction,represent:representJavascriptFunction}),Schema=schema,default_full=Schema.DEFAULT=new Schema({include:[default_safe],explicit:[_undefined,regexp,_function]}),common$1=common$6,YAMLException$1=exception,Mark=mark,DEFAULT_SAFE_SCHEMA$1=default_safe,DEFAULT_FULL_SCHEMA$1=default_full,_hasOwnProperty$1=Object.prototype.hasOwnProperty,CONTEXT_FLOW_IN=1,CONTEXT_FLOW_OUT=2,CONTEXT_BLOCK_IN=3,CONTEXT_BLOCK_OUT=4,CHOMPING_CLIP=1,CHOMPING_STRIP=2,CHOMPING_KEEP=3,PATTERN_NON_PRINTABLE=/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x84\x86-\x9F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/,PATTERN_NON_ASCII_LINE_BREAKS=/[\x85\u2028\u2029]/,PATTERN_FLOW_INDICATORS=/[,\[\]\{\}]/,PATTERN_TAG_HANDLE=/^(?:!|!!|![a-z\-]+!)$/i,PATTERN_TAG_URI=/^(?:!|[^,\[\]\{\}])(?:%[0-9a-f]{2}|[0-9a-z\-#;\/\?:@&=\+\$,_\.!~\*'\(\)\[\]])*$/i;function _class(e){return Object.prototype.toString.call(e)}function is_EOL(e){return e===10||e===13}function is_WHITE_SPACE(e){return e===9||e===32}function is_WS_OR_EOL(e){return e===9||e===32||e===10||e===13}function is_FLOW_INDICATOR(e){return e===44||e===91||e===93||e===123||e===125}function fromHexCode(e){var n;return 48<=e&&e<=57?e-48:(n=e|32,97<=n&&n<=102?n-97+10:-1)}function escapedHexLen(e){return e===120?2:e===117?4:e===85?8:0}function fromDecimalCode(e){return 48<=e&&e<=57?e-48:-1}function simpleEscapeSequence(e){return e===48?"\0":e===97?"\x07":e===98?"\b":e===116||e===9?"	":e===110?`
`:e===118?"\v":e===102?"\f":e===114?"\r":e===101?"\x1B":e===32?" ":e===34?'"':e===47?"/":e===92?"\\":e===78?"":e===95?" ":e===76?"\u2028":e===80?"\u2029":""}function charFromCodepoint(e){return e<=65535?String.fromCharCode(e):String.fromCharCode((e-65536>>10)+55296,(e-65536&1023)+56320)}var simpleEscapeCheck=new Array(256),simpleEscapeMap=new Array(256);for(var i=0;i<256;i++)simpleEscapeCheck[i]=simpleEscapeSequence(i)?1:0,simpleEscapeMap[i]=simpleEscapeSequence(i);function State$1(e,n){this.input=e,this.filename=n.filename||null,this.schema=n.schema||DEFAULT_FULL_SCHEMA$1,this.onWarning=n.onWarning||null,this.legacy=n.legacy||!1,this.json=n.json||!1,this.listener=n.listener||null,this.implicitTypes=this.schema.compiledImplicit,this.typeMap=this.schema.compiledTypeMap,this.length=e.length,this.position=0,this.line=0,this.lineStart=0,this.lineIndent=0,this.documents=[]}function generateError(e,n){return new YAMLException$1(n,new Mark(e.filename,e.input,e.position,e.line,e.position-e.lineStart))}function throwError(e,n){throw generateError(e,n)}function throwWarning(e,n){e.onWarning&&e.onWarning.call(null,generateError(e,n))}var directiveHandlers={YAML:function(n,r,t){var o,a,l;n.version!==null&&throwError(n,"duplication of %YAML directive"),t.length!==1&&throwError(n,"YAML directive accepts exactly one argument"),o=/^([0-9]+)\.([0-9]+)$/.exec(t[0]),o===null&&throwError(n,"ill-formed argument of the YAML directive"),a=parseInt(o[1],10),l=parseInt(o[2],10),a!==1&&throwError(n,"unacceptable YAML version of the document"),n.version=t[0],n.checkLineBreaks=l<2,l!==1&&l!==2&&throwWarning(n,"unsupported YAML version of the document")},TAG:function(n,r,t){var o,a;t.length!==2&&throwError(n,"TAG directive accepts exactly two arguments"),o=t[0],a=t[1],PATTERN_TAG_HANDLE.test(o)||throwError(n,"ill-formed tag handle (first argument) of the TAG directive"),_hasOwnProperty$1.call(n.tagMap,o)&&throwError(n,'there is a previously declared suffix for "'+o+'" tag handle'),PATTERN_TAG_URI.test(a)||throwError(n,"ill-formed tag prefix (second argument) of the TAG directive"),n.tagMap[o]=a}};function captureSegment(e,n,r,t){var o,a,l,c;if(n<r){if(c=e.input.slice(n,r),t)for(o=0,a=c.length;o<a;o+=1)l=c.charCodeAt(o),l===9||32<=l&&l<=1114111||throwError(e,"expected valid JSON character");else PATTERN_NON_PRINTABLE.test(c)&&throwError(e,"the stream contains non-printable characters");e.result+=c}}function mergeMappings(e,n,r,t){var o,a,l,c;for(common$1.isObject(r)||throwError(e,"cannot merge mappings; the provided source object is unacceptable"),o=Object.keys(r),l=0,c=o.length;l<c;l+=1)a=o[l],_hasOwnProperty$1.call(n,a)||(n[a]=r[a],t[a]=!0)}function storeMappingPair(e,n,r,t,o,a,l,c){var s,u;if(Array.isArray(o))for(o=Array.prototype.slice.call(o),s=0,u=o.length;s<u;s+=1)Array.isArray(o[s])&&throwError(e,"nested arrays are not supported inside keys"),typeof o=="object"&&_class(o[s])==="[object Object]"&&(o[s]="[object Object]");if(typeof o=="object"&&_class(o)==="[object Object]"&&(o="[object Object]"),o=String(o),n===null&&(n={}),t==="tag:yaml.org,2002:merge")if(Array.isArray(a))for(s=0,u=a.length;s<u;s+=1)mergeMappings(e,n,a[s],r);else mergeMappings(e,n,a,r);else!e.json&&!_hasOwnProperty$1.call(r,o)&&_hasOwnProperty$1.call(n,o)&&(e.line=l||e.line,e.position=c||e.position,throwError(e,"duplicated mapping key")),n[o]=a,delete r[o];return n}function readLineBreak(e){var n;n=e.input.charCodeAt(e.position),n===10?e.position++:n===13?(e.position++,e.input.charCodeAt(e.position)===10&&e.position++):throwError(e,"a line break is expected"),e.line+=1,e.lineStart=e.position}function skipSeparationSpace(e,n,r){for(var t=0,o=e.input.charCodeAt(e.position);o!==0;){for(;is_WHITE_SPACE(o);)o=e.input.charCodeAt(++e.position);if(n&&o===35)do o=e.input.charCodeAt(++e.position);while(o!==10&&o!==13&&o!==0);if(is_EOL(o))for(readLineBreak(e),o=e.input.charCodeAt(e.position),t++,e.lineIndent=0;o===32;)e.lineIndent++,o=e.input.charCodeAt(++e.position);else break}return r!==-1&&t!==0&&e.lineIndent<r&&throwWarning(e,"deficient indentation"),t}function testDocumentSeparator(e){var n=e.position,r;return r=e.input.charCodeAt(n),!!((r===45||r===46)&&r===e.input.charCodeAt(n+1)&&r===e.input.charCodeAt(n+2)&&(n+=3,r=e.input.charCodeAt(n),r===0||is_WS_OR_EOL(r)))}function writeFoldedLines(e,n){n===1?e.result+=" ":n>1&&(e.result+=common$1.repeat(`
`,n-1))}function readPlainScalar(e,n,r){var t,o,a,l,c,s,u,f,p=e.kind,d=e.result,m;if(m=e.input.charCodeAt(e.position),is_WS_OR_EOL(m)||is_FLOW_INDICATOR(m)||m===35||m===38||m===42||m===33||m===124||m===62||m===39||m===34||m===37||m===64||m===96||(m===63||m===45)&&(o=e.input.charCodeAt(e.position+1),is_WS_OR_EOL(o)||r&&is_FLOW_INDICATOR(o)))return!1;for(e.kind="scalar",e.result="",a=l=e.position,c=!1;m!==0;){if(m===58){if(o=e.input.charCodeAt(e.position+1),is_WS_OR_EOL(o)||r&&is_FLOW_INDICATOR(o))break}else if(m===35){if(t=e.input.charCodeAt(e.position-1),is_WS_OR_EOL(t))break}else{if(e.position===e.lineStart&&testDocumentSeparator(e)||r&&is_FLOW_INDICATOR(m))break;if(is_EOL(m))if(s=e.line,u=e.lineStart,f=e.lineIndent,skipSeparationSpace(e,!1,-1),e.lineIndent>=n){c=!0,m=e.input.charCodeAt(e.position);continue}else{e.position=l,e.line=s,e.lineStart=u,e.lineIndent=f;break}}c&&(captureSegment(e,a,l,!1),writeFoldedLines(e,e.line-s),a=l=e.position,c=!1),is_WHITE_SPACE(m)||(l=e.position+1),m=e.input.charCodeAt(++e.position)}return captureSegment(e,a,l,!1),e.result?!0:(e.kind=p,e.result=d,!1)}function readSingleQuotedScalar(e,n){var r,t,o;if(r=e.input.charCodeAt(e.position),r!==39)return!1;for(e.kind="scalar",e.result="",e.position++,t=o=e.position;(r=e.input.charCodeAt(e.position))!==0;)if(r===39)if(captureSegment(e,t,e.position,!0),r=e.input.charCodeAt(++e.position),r===39)t=e.position,e.position++,o=e.position;else return!0;else is_EOL(r)?(captureSegment(e,t,o,!0),writeFoldedLines(e,skipSeparationSpace(e,!1,n)),t=o=e.position):e.position===e.lineStart&&testDocumentSeparator(e)?throwError(e,"unexpected end of the document within a single quoted scalar"):(e.position++,o=e.position);throwError(e,"unexpected end of the stream within a single quoted scalar")}function readDoubleQuotedScalar(e,n){var r,t,o,a,l,c;if(c=e.input.charCodeAt(e.position),c!==34)return!1;for(e.kind="scalar",e.result="",e.position++,r=t=e.position;(c=e.input.charCodeAt(e.position))!==0;){if(c===34)return captureSegment(e,r,e.position,!0),e.position++,!0;if(c===92){if(captureSegment(e,r,e.position,!0),c=e.input.charCodeAt(++e.position),is_EOL(c))skipSeparationSpace(e,!1,n);else if(c<256&&simpleEscapeCheck[c])e.result+=simpleEscapeMap[c],e.position++;else if((l=escapedHexLen(c))>0){for(o=l,a=0;o>0;o--)c=e.input.charCodeAt(++e.position),(l=fromHexCode(c))>=0?a=(a<<4)+l:throwError(e,"expected hexadecimal character");e.result+=charFromCodepoint(a),e.position++}else throwError(e,"unknown escape sequence");r=t=e.position}else is_EOL(c)?(captureSegment(e,r,t,!0),writeFoldedLines(e,skipSeparationSpace(e,!1,n)),r=t=e.position):e.position===e.lineStart&&testDocumentSeparator(e)?throwError(e,"unexpected end of the document within a double quoted scalar"):(e.position++,t=e.position)}throwError(e,"unexpected end of the stream within a double quoted scalar")}function readFlowCollection(e,n){var r=!0,t,o=e.tag,a,l=e.anchor,c,s,u,f,p,d={},m,_,g,h;if(h=e.input.charCodeAt(e.position),h===91)s=93,p=!1,a=[];else if(h===123)s=125,p=!0,a={};else return!1;for(e.anchor!==null&&(e.anchorMap[e.anchor]=a),h=e.input.charCodeAt(++e.position);h!==0;){if(skipSeparationSpace(e,!0,n),h=e.input.charCodeAt(e.position),h===s)return e.position++,e.tag=o,e.anchor=l,e.kind=p?"mapping":"sequence",e.result=a,!0;r||throwError(e,"missed comma between flow collection entries"),_=m=g=null,u=f=!1,h===63&&(c=e.input.charCodeAt(e.position+1),is_WS_OR_EOL(c)&&(u=f=!0,e.position++,skipSeparationSpace(e,!0,n))),t=e.line,composeNode(e,n,CONTEXT_FLOW_IN,!1,!0),_=e.tag,m=e.result,skipSeparationSpace(e,!0,n),h=e.input.charCodeAt(e.position),(f||e.line===t)&&h===58&&(u=!0,h=e.input.charCodeAt(++e.position),skipSeparationSpace(e,!0,n),composeNode(e,n,CONTEXT_FLOW_IN,!1,!0),g=e.result),p?storeMappingPair(e,a,d,_,m,g):u?a.push(storeMappingPair(e,null,d,_,m,g)):a.push(m),skipSeparationSpace(e,!0,n),h=e.input.charCodeAt(e.position),h===44?(r=!0,h=e.input.charCodeAt(++e.position)):r=!1}throwError(e,"unexpected end of the stream within a flow collection")}function readBlockScalar(e,n){var r,t,o=CHOMPING_CLIP,a=!1,l=!1,c=n,s=0,u=!1,f,p;if(p=e.input.charCodeAt(e.position),p===124)t=!1;else if(p===62)t=!0;else return!1;for(e.kind="scalar",e.result="";p!==0;)if(p=e.input.charCodeAt(++e.position),p===43||p===45)CHOMPING_CLIP===o?o=p===43?CHOMPING_KEEP:CHOMPING_STRIP:throwError(e,"repeat of a chomping mode identifier");else if((f=fromDecimalCode(p))>=0)f===0?throwError(e,"bad explicit indentation width of a block scalar; it cannot be less than one"):l?throwError(e,"repeat of an indentation width identifier"):(c=n+f-1,l=!0);else break;if(is_WHITE_SPACE(p)){do p=e.input.charCodeAt(++e.position);while(is_WHITE_SPACE(p));if(p===35)do p=e.input.charCodeAt(++e.position);while(!is_EOL(p)&&p!==0)}for(;p!==0;){for(readLineBreak(e),e.lineIndent=0,p=e.input.charCodeAt(e.position);(!l||e.lineIndent<c)&&p===32;)e.lineIndent++,p=e.input.charCodeAt(++e.position);if(!l&&e.lineIndent>c&&(c=e.lineIndent),is_EOL(p)){s++;continue}if(e.lineIndent<c){o===CHOMPING_KEEP?e.result+=common$1.repeat(`
`,a?1+s:s):o===CHOMPING_CLIP&&a&&(e.result+=`
`);break}for(t?is_WHITE_SPACE(p)?(u=!0,e.result+=common$1.repeat(`
`,a?1+s:s)):u?(u=!1,e.result+=common$1.repeat(`
`,s+1)):s===0?a&&(e.result+=" "):e.result+=common$1.repeat(`
`,s):e.result+=common$1.repeat(`
`,a?1+s:s),a=!0,l=!0,s=0,r=e.position;!is_EOL(p)&&p!==0;)p=e.input.charCodeAt(++e.position);captureSegment(e,r,e.position,!1)}return!0}function readBlockSequence(e,n){var r,t=e.tag,o=e.anchor,a=[],l,c=!1,s;for(e.anchor!==null&&(e.anchorMap[e.anchor]=a),s=e.input.charCodeAt(e.position);s!==0&&!(s!==45||(l=e.input.charCodeAt(e.position+1),!is_WS_OR_EOL(l)));){if(c=!0,e.position++,skipSeparationSpace(e,!0,-1)&&e.lineIndent<=n){a.push(null),s=e.input.charCodeAt(e.position);continue}if(r=e.line,composeNode(e,n,CONTEXT_BLOCK_IN,!1,!0),a.push(e.result),skipSeparationSpace(e,!0,-1),s=e.input.charCodeAt(e.position),(e.line===r||e.lineIndent>n)&&s!==0)throwError(e,"bad indentation of a sequence entry");else if(e.lineIndent<n)break}return c?(e.tag=t,e.anchor=o,e.kind="sequence",e.result=a,!0):!1}function readBlockMapping(e,n,r){var t,o,a,l,c=e.tag,s=e.anchor,u={},f={},p=null,d=null,m=null,_=!1,g=!1,h;for(e.anchor!==null&&(e.anchorMap[e.anchor]=u),h=e.input.charCodeAt(e.position);h!==0;){if(t=e.input.charCodeAt(e.position+1),a=e.line,l=e.position,(h===63||h===58)&&is_WS_OR_EOL(t))h===63?(_&&(storeMappingPair(e,u,f,p,d,null),p=d=m=null),g=!0,_=!0,o=!0):_?(_=!1,o=!0):throwError(e,"incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line"),e.position+=1,h=t;else if(composeNode(e,r,CONTEXT_FLOW_OUT,!1,!0))if(e.line===a){for(h=e.input.charCodeAt(e.position);is_WHITE_SPACE(h);)h=e.input.charCodeAt(++e.position);if(h===58)h=e.input.charCodeAt(++e.position),is_WS_OR_EOL(h)||throwError(e,"a whitespace character is expected after the key-value separator within a block mapping"),_&&(storeMappingPair(e,u,f,p,d,null),p=d=m=null),g=!0,_=!1,o=!1,p=e.tag,d=e.result;else if(g)throwError(e,"can not read an implicit mapping pair; a colon is missed");else return e.tag=c,e.anchor=s,!0}else if(g)throwError(e,"can not read a block mapping entry; a multiline key may not be an implicit key");else return e.tag=c,e.anchor=s,!0;else break;if((e.line===a||e.lineIndent>n)&&(composeNode(e,n,CONTEXT_BLOCK_OUT,!0,o)&&(_?d=e.result:m=e.result),_||(storeMappingPair(e,u,f,p,d,m,a,l),p=d=m=null),skipSeparationSpace(e,!0,-1),h=e.input.charCodeAt(e.position)),e.lineIndent>n&&h!==0)throwError(e,"bad indentation of a mapping entry");else if(e.lineIndent<n)break}return _&&storeMappingPair(e,u,f,p,d,null),g&&(e.tag=c,e.anchor=s,e.kind="mapping",e.result=u),g}function readTagProperty(e){var n,r=!1,t=!1,o,a,l;if(l=e.input.charCodeAt(e.position),l!==33)return!1;if(e.tag!==null&&throwError(e,"duplication of a tag property"),l=e.input.charCodeAt(++e.position),l===60?(r=!0,l=e.input.charCodeAt(++e.position)):l===33?(t=!0,o="!!",l=e.input.charCodeAt(++e.position)):o="!",n=e.position,r){do l=e.input.charCodeAt(++e.position);while(l!==0&&l!==62);e.position<e.length?(a=e.input.slice(n,e.position),l=e.input.charCodeAt(++e.position)):throwError(e,"unexpected end of the stream within a verbatim tag")}else{for(;l!==0&&!is_WS_OR_EOL(l);)l===33&&(t?throwError(e,"tag suffix cannot contain exclamation marks"):(o=e.input.slice(n-1,e.position+1),PATTERN_TAG_HANDLE.test(o)||throwError(e,"named tag handle cannot contain such characters"),t=!0,n=e.position+1)),l=e.input.charCodeAt(++e.position);a=e.input.slice(n,e.position),PATTERN_FLOW_INDICATORS.test(a)&&throwError(e,"tag suffix cannot contain flow indicator characters")}return a&&!PATTERN_TAG_URI.test(a)&&throwError(e,"tag name cannot contain such characters: "+a),r?e.tag=a:_hasOwnProperty$1.call(e.tagMap,o)?e.tag=e.tagMap[o]+a:o==="!"?e.tag="!"+a:o==="!!"?e.tag="tag:yaml.org,2002:"+a:throwError(e,'undeclared tag handle "'+o+'"'),!0}function readAnchorProperty(e){var n,r;if(r=e.input.charCodeAt(e.position),r!==38)return!1;for(e.anchor!==null&&throwError(e,"duplication of an anchor property"),r=e.input.charCodeAt(++e.position),n=e.position;r!==0&&!is_WS_OR_EOL(r)&&!is_FLOW_INDICATOR(r);)r=e.input.charCodeAt(++e.position);return e.position===n&&throwError(e,"name of an anchor node must contain at least one character"),e.anchor=e.input.slice(n,e.position),!0}function readAlias(e){var n,r,t;if(t=e.input.charCodeAt(e.position),t!==42)return!1;for(t=e.input.charCodeAt(++e.position),n=e.position;t!==0&&!is_WS_OR_EOL(t)&&!is_FLOW_INDICATOR(t);)t=e.input.charCodeAt(++e.position);return e.position===n&&throwError(e,"name of an alias node must contain at least one character"),r=e.input.slice(n,e.position),_hasOwnProperty$1.call(e.anchorMap,r)||throwError(e,'unidentified alias "'+r+'"'),e.result=e.anchorMap[r],skipSeparationSpace(e,!0,-1),!0}function composeNode(e,n,r,t,o){var a,l,c,s=1,u=!1,f=!1,p,d,m,_,g;if(e.listener!==null&&e.listener("open",e),e.tag=null,e.anchor=null,e.kind=null,e.result=null,a=l=c=CONTEXT_BLOCK_OUT===r||CONTEXT_BLOCK_IN===r,t&&skipSeparationSpace(e,!0,-1)&&(u=!0,e.lineIndent>n?s=1:e.lineIndent===n?s=0:e.lineIndent<n&&(s=-1)),s===1)for(;readTagProperty(e)||readAnchorProperty(e);)skipSeparationSpace(e,!0,-1)?(u=!0,c=a,e.lineIndent>n?s=1:e.lineIndent===n?s=0:e.lineIndent<n&&(s=-1)):c=!1;if(c&&(c=u||o),(s===1||CONTEXT_BLOCK_OUT===r)&&(CONTEXT_FLOW_IN===r||CONTEXT_FLOW_OUT===r?_=n:_=n+1,g=e.position-e.lineStart,s===1?c&&(readBlockSequence(e,g)||readBlockMapping(e,g,_))||readFlowCollection(e,_)?f=!0:(l&&readBlockScalar(e,_)||readSingleQuotedScalar(e,_)||readDoubleQuotedScalar(e,_)?f=!0:readAlias(e)?(f=!0,(e.tag!==null||e.anchor!==null)&&throwError(e,"alias node should not have any properties")):readPlainScalar(e,_,CONTEXT_FLOW_IN===r)&&(f=!0,e.tag===null&&(e.tag="?")),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):s===0&&(f=c&&readBlockSequence(e,g))),e.tag!==null&&e.tag!=="!")if(e.tag==="?"){for(e.result!==null&&e.kind!=="scalar"&&throwError(e,'unacceptable node kind for !<?> tag; it should be "scalar", not "'+e.kind+'"'),p=0,d=e.implicitTypes.length;p<d;p+=1)if(m=e.implicitTypes[p],m.resolve(e.result)){e.result=m.construct(e.result),e.tag=m.tag,e.anchor!==null&&(e.anchorMap[e.anchor]=e.result);break}}else _hasOwnProperty$1.call(e.typeMap[e.kind||"fallback"],e.tag)?(m=e.typeMap[e.kind||"fallback"][e.tag],e.result!==null&&m.kind!==e.kind&&throwError(e,"unacceptable node kind for !<"+e.tag+'> tag; it should be "'+m.kind+'", not "'+e.kind+'"'),m.resolve(e.result)?(e.result=m.construct(e.result),e.anchor!==null&&(e.anchorMap[e.anchor]=e.result)):throwError(e,"cannot resolve a node with !<"+e.tag+"> explicit tag")):throwError(e,"unknown tag !<"+e.tag+">");return e.listener!==null&&e.listener("close",e),e.tag!==null||e.anchor!==null||f}function readDocument(e){var n=e.position,r,t,o,a=!1,l;for(e.version=null,e.checkLineBreaks=e.legacy,e.tagMap={},e.anchorMap={};(l=e.input.charCodeAt(e.position))!==0&&(skipSeparationSpace(e,!0,-1),l=e.input.charCodeAt(e.position),!(e.lineIndent>0||l!==37));){for(a=!0,l=e.input.charCodeAt(++e.position),r=e.position;l!==0&&!is_WS_OR_EOL(l);)l=e.input.charCodeAt(++e.position);for(t=e.input.slice(r,e.position),o=[],t.length<1&&throwError(e,"directive name must not be less than one character in length");l!==0;){for(;is_WHITE_SPACE(l);)l=e.input.charCodeAt(++e.position);if(l===35){do l=e.input.charCodeAt(++e.position);while(l!==0&&!is_EOL(l));break}if(is_EOL(l))break;for(r=e.position;l!==0&&!is_WS_OR_EOL(l);)l=e.input.charCodeAt(++e.position);o.push(e.input.slice(r,e.position))}l!==0&&readLineBreak(e),_hasOwnProperty$1.call(directiveHandlers,t)?directiveHandlers[t](e,t,o):throwWarning(e,'unknown document directive "'+t+'"')}if(skipSeparationSpace(e,!0,-1),e.lineIndent===0&&e.input.charCodeAt(e.position)===45&&e.input.charCodeAt(e.position+1)===45&&e.input.charCodeAt(e.position+2)===45?(e.position+=3,skipSeparationSpace(e,!0,-1)):a&&throwError(e,"directives end mark is expected"),composeNode(e,e.lineIndent-1,CONTEXT_BLOCK_OUT,!1,!0),skipSeparationSpace(e,!0,-1),e.checkLineBreaks&&PATTERN_NON_ASCII_LINE_BREAKS.test(e.input.slice(n,e.position))&&throwWarning(e,"non-ASCII line breaks are interpreted as content"),e.documents.push(e.result),e.position===e.lineStart&&testDocumentSeparator(e)){e.input.charCodeAt(e.position)===46&&(e.position+=3,skipSeparationSpace(e,!0,-1));return}if(e.position<e.length-1)throwError(e,"end of the stream or a document separator is expected");else return}function loadDocuments(e,n){e=String(e),n=n||{},e.length!==0&&(e.charCodeAt(e.length-1)!==10&&e.charCodeAt(e.length-1)!==13&&(e+=`
`),e.charCodeAt(0)===65279&&(e=e.slice(1)));var r=new State$1(e,n),t=e.indexOf("\0");for(t!==-1&&(r.position=t,throwError(r,"null byte is not allowed in input")),r.input+="\0";r.input.charCodeAt(r.position)===32;)r.lineIndent+=1,r.position+=1;for(;r.position<r.length-1;)readDocument(r);return r.documents}function loadAll(e,n,r){n!==null&&typeof n=="object"&&typeof r>"u"&&(r=n,n=null);var t=loadDocuments(e,r);if(typeof n!="function")return t;for(var o=0,a=t.length;o<a;o+=1)n(t[o])}function load(e,n){var r=loadDocuments(e,n);if(r.length!==0){if(r.length===1)return r[0];throw new YAMLException$1("expected a single document in the stream, but found more")}}function safeLoadAll(e,n,r){return typeof n=="object"&&n!==null&&typeof r>"u"&&(r=n,n=null),loadAll(e,n,common$1.extend({schema:DEFAULT_SAFE_SCHEMA$1},r))}function safeLoad(e,n){return load(e,common$1.extend({schema:DEFAULT_SAFE_SCHEMA$1},n))}loader$1.loadAll=loadAll;loader$1.load=load;loader$1.safeLoadAll=safeLoadAll;loader$1.safeLoad=safeLoad;var dumper$1={},common=common$6,YAMLException=exception,DEFAULT_FULL_SCHEMA=default_full,DEFAULT_SAFE_SCHEMA=default_safe,_toString=Object.prototype.toString,_hasOwnProperty=Object.prototype.hasOwnProperty,CHAR_TAB=9,CHAR_LINE_FEED=10,CHAR_CARRIAGE_RETURN=13,CHAR_SPACE=32,CHAR_EXCLAMATION=33,CHAR_DOUBLE_QUOTE=34,CHAR_SHARP=35,CHAR_PERCENT=37,CHAR_AMPERSAND=38,CHAR_SINGLE_QUOTE=39,CHAR_ASTERISK=42,CHAR_COMMA=44,CHAR_MINUS=45,CHAR_COLON=58,CHAR_EQUALS=61,CHAR_GREATER_THAN=62,CHAR_QUESTION=63,CHAR_COMMERCIAL_AT=64,CHAR_LEFT_SQUARE_BRACKET=91,CHAR_RIGHT_SQUARE_BRACKET=93,CHAR_GRAVE_ACCENT=96,CHAR_LEFT_CURLY_BRACKET=123,CHAR_VERTICAL_LINE=124,CHAR_RIGHT_CURLY_BRACKET=125,ESCAPE_SEQUENCES={};ESCAPE_SEQUENCES[0]="\\0";ESCAPE_SEQUENCES[7]="\\a";ESCAPE_SEQUENCES[8]="\\b";ESCAPE_SEQUENCES[9]="\\t";ESCAPE_SEQUENCES[10]="\\n";ESCAPE_SEQUENCES[11]="\\v";ESCAPE_SEQUENCES[12]="\\f";ESCAPE_SEQUENCES[13]="\\r";ESCAPE_SEQUENCES[27]="\\e";ESCAPE_SEQUENCES[34]='\\"';ESCAPE_SEQUENCES[92]="\\\\";ESCAPE_SEQUENCES[133]="\\N";ESCAPE_SEQUENCES[160]="\\_";ESCAPE_SEQUENCES[8232]="\\L";ESCAPE_SEQUENCES[8233]="\\P";var DEPRECATED_BOOLEANS_SYNTAX=["y","Y","yes","Yes","YES","on","On","ON","n","N","no","No","NO","off","Off","OFF"];function compileStyleMap(e,n){var r,t,o,a,l,c,s;if(n===null)return{};for(r={},t=Object.keys(n),o=0,a=t.length;o<a;o+=1)l=t[o],c=String(n[l]),l.slice(0,2)==="!!"&&(l="tag:yaml.org,2002:"+l.slice(2)),s=e.compiledTypeMap.fallback[l],s&&_hasOwnProperty.call(s.styleAliases,c)&&(c=s.styleAliases[c]),r[l]=c;return r}function encodeHex(e){var n,r,t;if(n=e.toString(16).toUpperCase(),e<=255)r="x",t=2;else if(e<=65535)r="u",t=4;else if(e<=4294967295)r="U",t=8;else throw new YAMLException("code point within a string may not be greater than 0xFFFFFFFF");return"\\"+r+common.repeat("0",t-n.length)+n}function State(e){this.schema=e.schema||DEFAULT_FULL_SCHEMA,this.indent=Math.max(1,e.indent||2),this.noArrayIndent=e.noArrayIndent||!1,this.skipInvalid=e.skipInvalid||!1,this.flowLevel=common.isNothing(e.flowLevel)?-1:e.flowLevel,this.styleMap=compileStyleMap(this.schema,e.styles||null),this.sortKeys=e.sortKeys||!1,this.lineWidth=e.lineWidth||80,this.noRefs=e.noRefs||!1,this.noCompatMode=e.noCompatMode||!1,this.condenseFlow=e.condenseFlow||!1,this.implicitTypes=this.schema.compiledImplicit,this.explicitTypes=this.schema.compiledExplicit,this.tag=null,this.result="",this.duplicates=[],this.usedDuplicates=null}function indentString(e,n){for(var r=common.repeat(" ",n),t=0,o=-1,a="",l,c=e.length;t<c;)o=e.indexOf(`
`,t),o===-1?(l=e.slice(t),t=c):(l=e.slice(t,o+1),t=o+1),l.length&&l!==`
`&&(a+=r),a+=l;return a}function generateNextLine(e,n){return`
`+common.repeat(" ",e.indent*n)}function testImplicitResolving(e,n){var r,t,o;for(r=0,t=e.implicitTypes.length;r<t;r+=1)if(o=e.implicitTypes[r],o.resolve(n))return!0;return!1}function isWhitespace(e){return e===CHAR_SPACE||e===CHAR_TAB}function isPrintable(e){return 32<=e&&e<=126||161<=e&&e<=55295&&e!==8232&&e!==8233||57344<=e&&e<=65533&&e!==65279||65536<=e&&e<=1114111}function isNsChar(e){return isPrintable(e)&&!isWhitespace(e)&&e!==65279&&e!==CHAR_CARRIAGE_RETURN&&e!==CHAR_LINE_FEED}function isPlainSafe(e,n){return isPrintable(e)&&e!==65279&&e!==CHAR_COMMA&&e!==CHAR_LEFT_SQUARE_BRACKET&&e!==CHAR_RIGHT_SQUARE_BRACKET&&e!==CHAR_LEFT_CURLY_BRACKET&&e!==CHAR_RIGHT_CURLY_BRACKET&&e!==CHAR_COLON&&(e!==CHAR_SHARP||n&&isNsChar(n))}function isPlainSafeFirst(e){return isPrintable(e)&&e!==65279&&!isWhitespace(e)&&e!==CHAR_MINUS&&e!==CHAR_QUESTION&&e!==CHAR_COLON&&e!==CHAR_COMMA&&e!==CHAR_LEFT_SQUARE_BRACKET&&e!==CHAR_RIGHT_SQUARE_BRACKET&&e!==CHAR_LEFT_CURLY_BRACKET&&e!==CHAR_RIGHT_CURLY_BRACKET&&e!==CHAR_SHARP&&e!==CHAR_AMPERSAND&&e!==CHAR_ASTERISK&&e!==CHAR_EXCLAMATION&&e!==CHAR_VERTICAL_LINE&&e!==CHAR_EQUALS&&e!==CHAR_GREATER_THAN&&e!==CHAR_SINGLE_QUOTE&&e!==CHAR_DOUBLE_QUOTE&&e!==CHAR_PERCENT&&e!==CHAR_COMMERCIAL_AT&&e!==CHAR_GRAVE_ACCENT}function needIndentIndicator(e){var n=/^\n* /;return n.test(e)}var STYLE_PLAIN=1,STYLE_SINGLE=2,STYLE_LITERAL=3,STYLE_FOLDED=4,STYLE_DOUBLE=5;function chooseScalarStyle(e,n,r,t,o){var a,l,c,s=!1,u=!1,f=t!==-1,p=-1,d=isPlainSafeFirst(e.charCodeAt(0))&&!isWhitespace(e.charCodeAt(e.length-1));if(n)for(a=0;a<e.length;a++){if(l=e.charCodeAt(a),!isPrintable(l))return STYLE_DOUBLE;c=a>0?e.charCodeAt(a-1):null,d=d&&isPlainSafe(l,c)}else{for(a=0;a<e.length;a++){if(l=e.charCodeAt(a),l===CHAR_LINE_FEED)s=!0,f&&(u=u||a-p-1>t&&e[p+1]!==" ",p=a);else if(!isPrintable(l))return STYLE_DOUBLE;c=a>0?e.charCodeAt(a-1):null,d=d&&isPlainSafe(l,c)}u=u||f&&a-p-1>t&&e[p+1]!==" "}return!s&&!u?d&&!o(e)?STYLE_PLAIN:STYLE_SINGLE:r>9&&needIndentIndicator(e)?STYLE_DOUBLE:u?STYLE_FOLDED:STYLE_LITERAL}function writeScalar(e,n,r,t){e.dump=function(){if(n.length===0)return"''";if(!e.noCompatMode&&DEPRECATED_BOOLEANS_SYNTAX.indexOf(n)!==-1)return"'"+n+"'";var o=e.indent*Math.max(1,r),a=e.lineWidth===-1?-1:Math.max(Math.min(e.lineWidth,40),e.lineWidth-o),l=t||e.flowLevel>-1&&r>=e.flowLevel;function c(s){return testImplicitResolving(e,s)}switch(chooseScalarStyle(n,l,e.indent,a,c)){case STYLE_PLAIN:return n;case STYLE_SINGLE:return"'"+n.replace(/'/g,"''")+"'";case STYLE_LITERAL:return"|"+blockHeader(n,e.indent)+dropEndingNewline(indentString(n,o));case STYLE_FOLDED:return">"+blockHeader(n,e.indent)+dropEndingNewline(indentString(foldString(n,a),o));case STYLE_DOUBLE:return'"'+escapeString(n)+'"';default:throw new YAMLException("impossible error: invalid scalar style")}}()}function blockHeader(e,n){var r=needIndentIndicator(e)?String(n):"",t=e[e.length-1]===`
`,o=t&&(e[e.length-2]===`
`||e===`
`),a=o?"+":t?"":"-";return r+a+`
`}function dropEndingNewline(e){return e[e.length-1]===`
`?e.slice(0,-1):e}function foldString(e,n){for(var r=/(\n+)([^\n]*)/g,t=function(){var u=e.indexOf(`
`);return u=u!==-1?u:e.length,r.lastIndex=u,foldLine(e.slice(0,u),n)}(),o=e[0]===`
`||e[0]===" ",a,l;l=r.exec(e);){var c=l[1],s=l[2];a=s[0]===" ",t+=c+(!o&&!a&&s!==""?`
`:"")+foldLine(s,n),o=a}return t}function foldLine(e,n){if(e===""||e[0]===" ")return e;for(var r=/ [^ ]/g,t,o=0,a,l=0,c=0,s="";t=r.exec(e);)c=t.index,c-o>n&&(a=l>o?l:c,s+=`
`+e.slice(o,a),o=a+1),l=c;return s+=`
`,e.length-o>n&&l>o?s+=e.slice(o,l)+`
`+e.slice(l+1):s+=e.slice(o),s.slice(1)}function escapeString(e){for(var n="",r,t,o,a=0;a<e.length;a++){if(r=e.charCodeAt(a),r>=55296&&r<=56319&&(t=e.charCodeAt(a+1),t>=56320&&t<=57343)){n+=encodeHex((r-55296)*1024+t-56320+65536),a++;continue}o=ESCAPE_SEQUENCES[r],n+=!o&&isPrintable(r)?e[a]:o||encodeHex(r)}return n}function writeFlowSequence(e,n,r){var t="",o=e.tag,a,l;for(a=0,l=r.length;a<l;a+=1)writeNode(e,n,r[a],!1,!1)&&(a!==0&&(t+=","+(e.condenseFlow?"":" ")),t+=e.dump);e.tag=o,e.dump="["+t+"]"}function writeBlockSequence(e,n,r,t){var o="",a=e.tag,l,c;for(l=0,c=r.length;l<c;l+=1)writeNode(e,n+1,r[l],!0,!0)&&((!t||l!==0)&&(o+=generateNextLine(e,n)),e.dump&&CHAR_LINE_FEED===e.dump.charCodeAt(0)?o+="-":o+="- ",o+=e.dump);e.tag=a,e.dump=o||"[]"}function writeFlowMapping(e,n,r){var t="",o=e.tag,a=Object.keys(r),l,c,s,u,f;for(l=0,c=a.length;l<c;l+=1)f="",l!==0&&(f+=", "),e.condenseFlow&&(f+='"'),s=a[l],u=r[s],writeNode(e,n,s,!1,!1)&&(e.dump.length>1024&&(f+="? "),f+=e.dump+(e.condenseFlow?'"':"")+":"+(e.condenseFlow?"":" "),writeNode(e,n,u,!1,!1)&&(f+=e.dump,t+=f));e.tag=o,e.dump="{"+t+"}"}function writeBlockMapping(e,n,r,t){var o="",a=e.tag,l=Object.keys(r),c,s,u,f,p,d;if(e.sortKeys===!0)l.sort();else if(typeof e.sortKeys=="function")l.sort(e.sortKeys);else if(e.sortKeys)throw new YAMLException("sortKeys must be a boolean or a function");for(c=0,s=l.length;c<s;c+=1)d="",(!t||c!==0)&&(d+=generateNextLine(e,n)),u=l[c],f=r[u],writeNode(e,n+1,u,!0,!0,!0)&&(p=e.tag!==null&&e.tag!=="?"||e.dump&&e.dump.length>1024,p&&(e.dump&&CHAR_LINE_FEED===e.dump.charCodeAt(0)?d+="?":d+="? "),d+=e.dump,p&&(d+=generateNextLine(e,n)),writeNode(e,n+1,f,!0,p)&&(e.dump&&CHAR_LINE_FEED===e.dump.charCodeAt(0)?d+=":":d+=": ",d+=e.dump,o+=d));e.tag=a,e.dump=o||"{}"}function detectType(e,n,r){var t,o,a,l,c,s;for(o=r?e.explicitTypes:e.implicitTypes,a=0,l=o.length;a<l;a+=1)if(c=o[a],(c.instanceOf||c.predicate)&&(!c.instanceOf||typeof n=="object"&&n instanceof c.instanceOf)&&(!c.predicate||c.predicate(n))){if(e.tag=r?c.tag:"?",c.represent){if(s=e.styleMap[c.tag]||c.defaultStyle,_toString.call(c.represent)==="[object Function]")t=c.represent(n,s);else if(_hasOwnProperty.call(c.represent,s))t=c.represent[s](n,s);else throw new YAMLException("!<"+c.tag+'> tag resolver accepts not "'+s+'" style');e.dump=t}return!0}return!1}function writeNode(e,n,r,t,o,a){e.tag=null,e.dump=r,detectType(e,r,!1)||detectType(e,r,!0);var l=_toString.call(e.dump);t&&(t=e.flowLevel<0||e.flowLevel>n);var c=l==="[object Object]"||l==="[object Array]",s,u;if(c&&(s=e.duplicates.indexOf(r),u=s!==-1),(e.tag!==null&&e.tag!=="?"||u||e.indent!==2&&n>0)&&(o=!1),u&&e.usedDuplicates[s])e.dump="*ref_"+s;else{if(c&&u&&!e.usedDuplicates[s]&&(e.usedDuplicates[s]=!0),l==="[object Object]")t&&Object.keys(e.dump).length!==0?(writeBlockMapping(e,n,e.dump,o),u&&(e.dump="&ref_"+s+e.dump)):(writeFlowMapping(e,n,e.dump),u&&(e.dump="&ref_"+s+" "+e.dump));else if(l==="[object Array]"){var f=e.noArrayIndent&&n>0?n-1:n;t&&e.dump.length!==0?(writeBlockSequence(e,f,e.dump,o),u&&(e.dump="&ref_"+s+e.dump)):(writeFlowSequence(e,f,e.dump),u&&(e.dump="&ref_"+s+" "+e.dump))}else if(l==="[object String]")e.tag!=="?"&&writeScalar(e,e.dump,n,a);else{if(e.skipInvalid)return!1;throw new YAMLException("unacceptable kind of an object to dump "+l)}e.tag!==null&&e.tag!=="?"&&(e.dump="!<"+e.tag+"> "+e.dump)}return!0}function getDuplicateReferences(e,n){var r=[],t=[],o,a;for(inspectNode(e,r,t),o=0,a=t.length;o<a;o+=1)n.duplicates.push(r[t[o]]);n.usedDuplicates=new Array(a)}function inspectNode(e,n,r){var t,o,a;if(e!==null&&typeof e=="object")if(o=n.indexOf(e),o!==-1)r.indexOf(o)===-1&&r.push(o);else if(n.push(e),Array.isArray(e))for(o=0,a=e.length;o<a;o+=1)inspectNode(e[o],n,r);else for(t=Object.keys(e),o=0,a=t.length;o<a;o+=1)inspectNode(e[t[o]],n,r)}function dump(e,n){n=n||{};var r=new State(n);return r.noRefs||getDuplicateReferences(e,r),writeNode(r,0,e,!0,!0)?r.dump+`
`:""}function safeDump(e,n){return dump(e,common.extend({schema:DEFAULT_SAFE_SCHEMA},n))}dumper$1.dump=dump;dumper$1.safeDump=safeDump;var loader=loader$1,dumper=dumper$1;function deprecated(e){return function(){throw new Error("Function "+e+" is deprecated and cannot be used.")}}jsYaml$1.Type=type;jsYaml$1.Schema=schema;jsYaml$1.FAILSAFE_SCHEMA=failsafe;jsYaml$1.JSON_SCHEMA=json;jsYaml$1.CORE_SCHEMA=core;jsYaml$1.DEFAULT_SAFE_SCHEMA=default_safe;jsYaml$1.DEFAULT_FULL_SCHEMA=default_full;jsYaml$1.load=loader.load;jsYaml$1.loadAll=loader.loadAll;jsYaml$1.safeLoad=loader.safeLoad;jsYaml$1.safeLoadAll=loader.safeLoadAll;jsYaml$1.dump=dumper.dump;jsYaml$1.safeDump=dumper.safeDump;jsYaml$1.YAMLException=exception;jsYaml$1.MINIMAL_SCHEMA=failsafe;jsYaml$1.SAFE_SCHEMA=default_safe;jsYaml$1.DEFAULT_SCHEMA=default_full;jsYaml$1.scan=deprecated("scan");jsYaml$1.parse=deprecated("parse");jsYaml$1.compose=deprecated("compose");jsYaml$1.addConstructor=deprecated("addConstructor");var yaml=jsYaml$1,jsYaml=yaml,parser=jsYaml,optionalByteOrderMark="\\ufeff?",platform=typeof process<"u"?process.platform:"",pattern="^("+optionalByteOrderMark+"(= yaml =|---)$([\\s\\S]*?)^(?:\\2|\\.\\.\\.)\\s*$"+(platform==="win32"?"\\r?":"")+"(?:\\n)?)",regex=new RegExp(pattern,"m");frontMatter.exports=extractor;frontMatter.exports.test=test;function extractor(e,n){e=e||"";var r={allowUnsafe:!1};n=n instanceof Object?{...r,...n}:r,n.allowUnsafe=!!n.allowUnsafe;var t=e.split(/(\r?\n)/);return t[0]&&/= yaml =|---/.test(t[0])?parse$2(e,n.allowUnsafe):{attributes:{},body:e,bodyBegin:1}}function computeLocation(e,n){for(var r=1,t=n.indexOf(`
`),o=e.index+e[0].length;t!==-1;){if(t>=o)return r;r++,t=n.indexOf(`
`,t+1)}return r}function parse$2(e,n){var r=regex.exec(e);if(!r)return{attributes:{},body:e,bodyBegin:1};var t=n?parser.load:parser.safeLoad,o=r[r.length-1].replace(/^\s+|\s+$/g,""),a=t(o)||{},l=e.replace(r[0],""),c=computeLocation(r,e);return{attributes:a,body:l,bodyBegin:c,frontmatter:o}}function test(e){return e=e||"",regex.test(e)}var frontMatterExports=frontMatter.exports;const fm=getDefaultExportFromCjs(frontMatterExports),parseFrontMatterBlock=e=>{try{const{attributes:n,body:r}=fm(e);return{data:n,body:r}}catch(n){return{data:null,body:"",error:n}}};function addLegacyImageLayoutMarkdownProcessors(e){for(const n in layoutImages)e.registerMarkdownCodeBlockProcessor(`image-layout-${n}`,(r,t,o)=>{renderLegacyLayoutComponent(r,t,o,e,n)})}function renderLegacyLayoutComponent(e,n,r,t,o){var s,u,f;const a=parseFrontMatterBlock(e),l=getImages(a.body),c=resolveLocalImages(l,r,t);new LegacyImageLayout({target:n,props:{caption:((s=a.data)==null?void 0:s.caption)??"",descriptions:(u=a.data)==null?void 0:u.descriptions,layout:o,requiredImages:layoutImages[o],images:c,permanentOverlay:((f=a.data)==null?void 0:f.permanentOverlay)??t.settings.shouldOverlayPermanently}})}function create_if_block$2(e){let n,r,t;return{c(){n=element("div"),r=element("div"),t=text(e[1]),attr(r,"class","w-full rounded-md bg-white bg-opacity-75 px-4 py-2 text-center text-sm font-medium text-gray-900 backdrop-blur backdrop-filter"),attr(n,"class","absolute bottom-0 left-0 right-0 flex items-end p-4"),attr(n,"aria-hidden","true"),toggle_class(n,"opacity-0",!e[3]),toggle_class(n,"group-hover:opacity-100",!e[3])},m(o,a){insert(o,n,a),append(n,r),append(r,t)},p(o,a){a&2&&set_data(t,o[1]),a&8&&toggle_class(n,"opacity-0",!o[3]),a&8&&toggle_class(n,"group-hover:opacity-100",!o[3])},d(o){o&&detach(n)}}}function create_fragment$8(e){let n,r,t,o,a,l,c=e[1]&&create_if_block$2(e);return{c(){n=element("div"),r=element("img"),a=space(),c&&c.c(),attr(r,"class","w-full h-full object-cover object-center"),src_url_equal(r.src,t=e[0])||attr(r,"src",t),attr(r,"alt",o=`Image ${e[2]+1}`),attr(n,"class",l=`group relative image-layouts-masonry-image-${e[2]}`)},m(s,u){insert(s,n,u),append(n,r),append(n,a),c&&c.m(n,null)},p(s,[u]){u&1&&!src_url_equal(r.src,t=s[0])&&attr(r,"src",t),u&4&&o!==(o=`Image ${s[2]+1}`)&&attr(r,"alt",o),s[1]?c?c.p(s,u):(c=create_if_block$2(s),c.c(),c.m(n,null)):c&&(c.d(1),c=null),u&4&&l!==(l=`group relative image-layouts-masonry-image-${s[2]}`)&&attr(n,"class",l)},i:noop,o:noop,d(s){s&&detach(n),c&&c.d()}}}function instance$8(e,n,r){let{src:t}=n,{description:o}=n,{index:a}=n,{permanentOverlay:l=!1}=n;return e.$$set=c=>{"src"in c&&r(0,t=c.src),"description"in c&&r(1,o=c.description),"index"in c&&r(2,a=c.index),"permanentOverlay"in c&&r(3,l=c.permanentOverlay)},[t,o,a,l]}class LegacyMasonryImage extends SvelteComponent{constructor(n){super(),init(this,n,instance$8,create_fragment$8,safe_not_equal,{src:0,description:1,index:2,permanentOverlay:3})}}const LegacyMasonryLayout_svelte_svelte_type_style_lang="";function get_each_context$1(e,n,r){const t=e.slice();return t[5]=n[r],t[7]=r,t}function get_each_context_1$1(e,n,r){const t=e.slice();return t[8]=n[r],t[10]=r,t}function create_if_block$1(e){let n,r;return n=new LegacyMasonryImage({props:{src:e[8].link,description:e[3][e[10]]??e[8].alt,index:e[10],permanentOverlay:e[4]}}),{c(){create_component(n.$$.fragment)},m(t,o){mount_component(n,t,o),r=!0},p(t,o){const a={};o&2&&(a.src=t[8].link),o&10&&(a.description=t[3][t[10]]??t[8].alt),o&2&&(a.index=t[10]),o&16&&(a.permanentOverlay=t[4]),n.$set(a)},i(t){r||(transition_in(n.$$.fragment,t),r=!0)},o(t){transition_out(n.$$.fragment,t),r=!1},d(t){destroy_component(n,t)}}}function create_each_block_1$1(e,n){let r,t,o,a=n[10]%n[0]===n[7]&&create_if_block$1(n);return{key:e,first:null,c(){r=empty(),a&&a.c(),t=empty(),this.first=r},m(l,c){insert(l,r,c),a&&a.m(l,c),insert(l,t,c),o=!0},p(l,c){n=l,n[10]%n[0]===n[7]?a?(a.p(n,c),c&3&&transition_in(a,1)):(a=create_if_block$1(n),a.c(),transition_in(a,1),a.m(t.parentNode,t)):a&&(group_outros(),transition_out(a,1,1,()=>{a=null}),check_outros())},i(l){o||(transition_in(a),o=!0)},o(l){transition_out(a),o=!1},d(l){l&&(detach(r),detach(t)),a&&a.d(l)}}}function create_each_block$1(e){let n,r=[],t=new Map,o,a,l=ensure_array_like(e[1]);const c=s=>s[8].link;for(let s=0;s<l.length;s+=1){let u=get_each_context_1$1(e,l,s),f=c(u);t.set(f,r[s]=create_each_block_1$1(f,u))}return{c(){n=element("div");for(let s=0;s<r.length;s+=1)r[s].c();o=space(),attr(n,"class",null_to_empty("image-layouts-masonry-column")+" svelte-1ewls1i")},m(s,u){insert(s,n,u);for(let f=0;f<r.length;f+=1)r[f]&&r[f].m(n,null);append(n,o),a=!0},p(s,u){u&27&&(l=ensure_array_like(s[1]),group_outros(),r=update_keyed_each(r,u,c,1,s,l,t,n,outro_and_destroy_block,create_each_block_1$1,o,get_each_context_1$1),check_outros())},i(s){if(!a){for(let u=0;u<l.length;u+=1)transition_in(r[u]);a=!0}},o(s){for(let u=0;u<r.length;u+=1)transition_out(r[u]);a=!1},d(s){s&&detach(n);for(let u=0;u<r.length;u+=1)r[u].d()}}}function create_fragment$7(e){let n,r,t,o,a,l=ensure_array_like(Array(e[0])),c=[];for(let u=0;u<l.length;u+=1)c[u]=create_each_block$1(get_each_context$1(e,l,u));const s=u=>transition_out(c[u],1,1,()=>{c[u]=null});return o=new Caption({props:{caption:e[2]}}),{c(){n=element("div");for(let u=0;u<c.length;u+=1)c[u].c();t=space(),create_component(o.$$.fragment),attr(n,"class",r=null_to_empty(`image-layouts-masonry-grid-${e[0]}`)+" svelte-1ewls1i")},m(u,f){insert(u,n,f);for(let p=0;p<c.length;p+=1)c[p]&&c[p].m(n,null);insert(u,t,f),mount_component(o,u,f),a=!0},p(u,[f]){if(f&27){l=ensure_array_like(Array(u[0]));let d;for(d=0;d<l.length;d+=1){const m=get_each_context$1(u,l,d);c[d]?(c[d].p(m,f),transition_in(c[d],1)):(c[d]=create_each_block$1(m),c[d].c(),transition_in(c[d],1),c[d].m(n,null))}for(group_outros(),d=l.length;d<c.length;d+=1)s(d);check_outros()}(!a||f&1&&r!==(r=null_to_empty(`image-layouts-masonry-grid-${u[0]}`)+" svelte-1ewls1i"))&&attr(n,"class",r);const p={};f&4&&(p.caption=u[2]),o.$set(p)},i(u){if(!a){for(let f=0;f<l.length;f+=1)transition_in(c[f]);transition_in(o.$$.fragment,u),a=!0}},o(u){c=c.filter(Boolean);for(let f=0;f<c.length;f+=1)transition_out(c[f]);transition_out(o.$$.fragment,u),a=!1},d(u){u&&(detach(n),detach(t)),destroy_each(c,u),destroy_component(o,u)}}}function instance$7(e,n,r){let{columns:t}=n,{images:o=[]}=n,{caption:a=""}=n,{descriptions:l=[]}=n,{permanentOverlay:c=!1}=n;return e.$$set=s=>{"columns"in s&&r(0,t=s.columns),"images"in s&&r(1,o=s.images),"caption"in s&&r(2,a=s.caption),"descriptions"in s&&r(3,l=s.descriptions),"permanentOverlay"in s&&r(4,c=s.permanentOverlay)},[t,o,a,l,c]}class LegacyMasonryLayout extends SvelteComponent{constructor(n){super(),init(this,n,instance$7,create_fragment$7,safe_not_equal,{columns:0,images:1,caption:2,descriptions:3,permanentOverlay:4})}}function addLegacyMasonryMarkdownProcessors(e){for(let n=2;n<=6;n++)e.registerMarkdownCodeBlockProcessor(`image-layout-masonry-${n}`,(r,t,o)=>{renderLegacyMasonryLayoutComponent(r,t,o,e,n)})}function renderLegacyMasonryLayoutComponent(e,n,r,t,o){var s,u,f;const a=parseFrontMatterBlock(e),l=getImages(a.body),c=resolveLocalImages(l,r,t);new LegacyMasonryLayout({target:n,props:{caption:((s=a.data)==null?void 0:s.caption)??"",descriptions:(u=a.data)==null?void 0:u.descriptions,columns:o,images:c,permanentOverlay:((f=a.data)==null?void 0:f.permanentOverlay)??t.settings.shouldOverlayPermanently}})}const ImageLayouts_svelte_svelte_type_style_lang="";function create_fragment$6(e){let n,r;const t=e[1].default,o=create_slot(t,e,e[0],null);return{c(){n=element("div"),o&&o.c(),attr(n,"class","image-layouts")},m(a,l){insert(a,n,l),o&&o.m(n,null),r=!0},p(a,[l]){o&&o.p&&(!r||l&1)&&update_slot_base(o,t,a,a[0],r?get_slot_changes(t,a[0],l,null):get_all_dirty_from_scope(a[0]),null)},i(a){r||(transition_in(o,a),r=!0)},o(a){transition_out(o,a),r=!1},d(a){a&&detach(n),o&&o.d(a)}}}function instance$6(e,n,r){let{$$slots:t={},$$scope:o}=n;return e.$$set=a=>{"$$scope"in a&&r(0,o=a.$$scope)},[o,t]}class ImageLayouts extends SvelteComponent{constructor(n){super(),init(this,n,instance$6,create_fragment$6,safe_not_equal,{})}}const CarouselButton_svelte_svelte_type_style_lang="";function create_fragment$5(e){let n,r,t,o;const a=e[1].default,l=create_slot(a,e,e[0],null);return{c(){n=element("button"),l&&l.c(),attr(n,"class","rounded-full bg-gray-600 p-2 text-white shadow-sm hover:bg-gray-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-bg-gray-600 w-10 h-10 svelte-z9o5q9")},m(c,s){insert(c,n,s),l&&l.m(n,null),r=!0,t||(o=listen(n,"click",e[2]),t=!0)},p(c,[s]){l&&l.p&&(!r||s&1)&&update_slot_base(l,a,c,c[0],r?get_slot_changes(a,c[0],s,null):get_all_dirty_from_scope(c[0]),null)},i(c){r||(transition_in(l,c),r=!0)},o(c){transition_out(l,c),r=!1},d(c){c&&detach(n),l&&l.d(c),t=!1,o()}}}function instance$5(e,n,r){let{$$slots:t={},$$scope:o}=n;function a(l){bubble.call(this,e,l)}return e.$$set=l=>{"$$scope"in l&&r(0,o=l.$$scope)},[o,t,a]}class CarouselButton extends SvelteComponent{constructor(n){super(),init(this,n,instance$5,create_fragment$5,safe_not_equal,{})}}function create_default_slot$2(e){let n,r;return{c(){n=svg_element("svg"),r=svg_element("path"),attr(r,"stroke-linecap","round"),attr(r,"stroke-linejoin","round"),attr(r,"d","M13.5 4.5 21 12m0 0-7.5 7.5M21 12H3"),attr(n,"xmlns","http://www.w3.org/2000/svg"),attr(n,"fill","none"),attr(n,"viewBox","0 0 24 24"),attr(n,"stroke-width","1.5"),attr(n,"stroke","currentColor"),attr(n,"class","w-6 h-6")},m(t,o){insert(t,n,o),append(n,r)},p:noop,d(t){t&&detach(n)}}}function create_fragment$4(e){let n,r;return n=new CarouselButton({props:{$$slots:{default:[create_default_slot$2]},$$scope:{ctx:e}}}),n.$on("click",e[0]),{c(){create_component(n.$$.fragment)},m(t,o){mount_component(n,t,o),r=!0},p(t,[o]){const a={};o&2&&(a.$$scope={dirty:o,ctx:t}),n.$set(a)},i(t){r||(transition_in(n.$$.fragment,t),r=!0)},o(t){transition_out(n.$$.fragment,t),r=!1},d(t){destroy_component(n,t)}}}function instance$4(e){function n(r){bubble.call(this,e,r)}return[n]}class NextButton extends SvelteComponent{constructor(n){super(),init(this,n,instance$4,create_fragment$4,safe_not_equal,{})}}const PillButton_svelte_svelte_type_style_lang="";function create_fragment$3(e){let n,r,t;return{c(){n=element("button"),attr(n,"type","button"),attr(n,"class",r=null_to_empty(`w-3 h-3 rounded-full ${e[0]&&"current"}`)+" svelte-3h3ad5"),attr(n,"aria-current",t=e[0]?"true":"false")},m(o,a){insert(o,n,a)},p(o,[a]){a&1&&r!==(r=null_to_empty(`w-3 h-3 rounded-full ${o[0]&&"current"}`)+" svelte-3h3ad5")&&attr(n,"class",r),a&1&&t!==(t=o[0]?"true":"false")&&attr(n,"aria-current",t)},i:noop,o:noop,d(o){o&&detach(n)}}}function instance$3(e,n,r){let{current:t=!1}=n;return e.$$set=o=>{"current"in o&&r(0,t=o.current)},[t]}class PillButton extends SvelteComponent{constructor(n){super(),init(this,n,instance$3,create_fragment$3,safe_not_equal,{current:0})}}function create_default_slot$1(e){let n,r;return{c(){n=svg_element("svg"),r=svg_element("path"),attr(r,"stroke-linecap","round"),attr(r,"stroke-linejoin","round"),attr(r,"d","M10.5 19.5 3 12m0 0 7.5-7.5M3 12h18"),attr(n,"xmlns","http://www.w3.org/2000/svg"),attr(n,"fill","none"),attr(n,"viewBox","0 0 24 24"),attr(n,"stroke-width","1.5"),attr(n,"stroke","currentColor"),attr(n,"class","w-6 h-6")},m(t,o){insert(t,n,o),append(n,r)},p:noop,d(t){t&&detach(n)}}}function create_fragment$2(e){let n,r;return n=new CarouselButton({props:{$$slots:{default:[create_default_slot$1]},$$scope:{ctx:e}}}),n.$on("click",e[0]),{c(){create_component(n.$$.fragment)},m(t,o){mount_component(n,t,o),r=!0},p(t,[o]){const a={};o&2&&(a.$$scope={dirty:o,ctx:t}),n.$set(a)},i(t){r||(transition_in(n.$$.fragment,t),r=!0)},o(t){transition_out(n.$$.fragment,t),r=!1},d(t){destroy_component(n,t)}}}function instance$2(e){function n(r){bubble.call(this,e,r)}return[n]}class PrevButton extends SvelteComponent{constructor(n){super(),init(this,n,instance$2,create_fragment$2,safe_not_equal,{})}}function get_each_context_1(e,n,r){const t=e.slice();return t[10]=n[r],t[9]=r,t}function get_each_context(e,n,r){const t=e.slice();return t[7]=n[r],t[9]=r,t}function create_else_block(e){let n,r,t=ensure_array_like(e[0]),o=[];for(let l=0;l<t.length;l+=1)o[l]=create_each_block_1(get_each_context_1(e,t,l));const a=l=>transition_out(o[l],1,1,()=>{o[l]=null});return{c(){n=element("div");for(let l=0;l<o.length;l+=1)o[l].c();attr(n,"class","flex items-center justify-center space-x-3 rtl:space-x-reverse")},m(l,c){insert(l,n,c);for(let s=0;s<o.length;s+=1)o[s]&&o[s].m(n,null);r=!0},p(l,c){if(c&5){t=ensure_array_like(l[0]);let s;for(s=0;s<t.length;s+=1){const u=get_each_context_1(l,t,s);o[s]?(o[s].p(u,c),transition_in(o[s],1)):(o[s]=create_each_block_1(u),o[s].c(),transition_in(o[s],1),o[s].m(n,null))}for(group_outros(),s=t.length;s<o.length;s+=1)a(s);check_outros()}},i(l){if(!r){for(let c=0;c<t.length;c+=1)transition_in(o[c]);r=!0}},o(l){o=o.filter(Boolean);for(let c=0;c<o.length;c+=1)transition_out(o[c]);r=!1},d(l){l&&detach(n),destroy_each(o,l)}}}function create_if_block(e){let n,r,t,o=ensure_array_like(e[0]),a=[];for(let l=0;l<o.length;l+=1)a[l]=create_each_block(get_each_context(e,o,l));return{c(){n=element("div");for(let l=0;l<a.length;l+=1)a[l].c();attr(n,"class","overflow-x-auto overflow-y-hidden whitespace-nowrap touch-pan-x scroll-snap-x scrollbar-hide")},m(l,c){insert(l,n,c);for(let s=0;s<a.length;s+=1)a[s]&&a[s].m(n,null);r||(t=listen(n,"touchmove",touchmove_handler),r=!0)},p(l,c){if(c&5){o=ensure_array_like(l[0]);let s;for(s=0;s<o.length;s+=1){const u=get_each_context(l,o,s);a[s]?a[s].p(u,c):(a[s]=create_each_block(u),a[s].c(),a[s].m(n,null))}for(;s<a.length;s+=1)a[s].d(1);a.length=o.length}},i:noop,o:noop,d(l){l&&detach(n),destroy_each(a,l),r=!1,t()}}}function create_each_block_1(e){let n,r;function t(){return e[6](e[9])}return n=new PillButton({props:{current:e[2]===e[9]}}),n.$on("click",t),{c(){create_component(n.$$.fragment)},m(o,a){mount_component(n,o,a),r=!0},p(o,a){e=o;const l={};a&4&&(l.current=e[2]===e[9]),n.$set(l)},i(o){r||(transition_in(n.$$.fragment,o),r=!0)},o(o){transition_out(n.$$.fragment,o),r=!1},d(o){destroy_component(n,o)}}}function create_each_block(e){let n,r,t,o,a,l;function c(){return e[5](e[9])}return{c(){n=element("div"),r=element("img"),o=space(),src_url_equal(r.src,t=e[7])||attr(r,"src",t),attr(r,"class","w-full h-full object-cover rounded-md"),attr(r,"alt",`Thumbnail ${e[9]+1}`),attr(n,"class","inline-block w-24 h-16 scroll-snap-align-start mr-2 mb-2")},m(s,u){insert(s,n,u),append(n,r),append(n,o),a||(l=listen(r,"click",c),a=!0)},p(s,u){e=s,u&1&&!src_url_equal(r.src,t=e[7])&&attr(r,"src",t)},d(s){s&&detach(n),a=!1,l()}}}function create_default_slot(e){let n,r,t,o,a,l,c,s,u,f,p,d,m,_,g;s=new PrevButton({}),s.$on("click",e[4]),f=new NextButton({}),f.$on("click",e[3]);const h=[create_if_block,create_else_block],v=[];function w(y,x){return y[1]?0:1}return m=w(e),_=v[m]=h[m](e),{c(){n=element("div"),r=element("div"),t=element("img"),l=space(),c=element("div"),create_component(s.$$.fragment),u=space(),create_component(f.$$.fragment),p=space(),d=element("div"),_.c(),src_url_equal(t.src,o=e[0][e[2]])||attr(t,"src",o),attr(t,"class","object-center object-contain h-full"),attr(t,"alt",a=`Image ${e[2]+1}`),attr(c,"class","absolute mx-8 flex h-full w-full justify-between items-center z-30"),attr(r,"class","relative py-2 flex w-full overflow-hidden rounded-lg h-56 md:h-96 items-center justify-center"),attr(d,"class","w-full mb-2"),attr(n,"class","px-2 md:px-8 bg-black flex flex-col gap-y-2 cursor-default")},m(y,x){insert(y,n,x),append(n,r),append(r,t),append(r,l),append(r,c),mount_component(s,c,null),append(c,u),mount_component(f,c,null),append(n,p),append(n,d),v[m].m(d,null),g=!0},p(y,x){(!g||x&5&&!src_url_equal(t.src,o=y[0][y[2]]))&&attr(t,"src",o),(!g||x&4&&a!==(a=`Image ${y[2]+1}`))&&attr(t,"alt",a);let S=m;m=w(y),m===S?v[m].p(y,x):(group_outros(),transition_out(v[S],1,1,()=>{v[S]=null}),check_outros(),_=v[m],_?_.p(y,x):(_=v[m]=h[m](y),_.c()),transition_in(_,1),_.m(d,null))},i(y){g||(transition_in(s.$$.fragment,y),transition_in(f.$$.fragment,y),transition_in(_),g=!0)},o(y){transition_out(s.$$.fragment,y),transition_out(f.$$.fragment,y),transition_out(_),g=!1},d(y){y&&detach(n),destroy_component(s),destroy_component(f),v[m].d()}}}function create_fragment$1(e){let n,r;return n=new ImageLayouts({props:{$$slots:{default:[create_default_slot]},$$scope:{ctx:e}}}),{c(){create_component(n.$$.fragment)},m(t,o){mount_component(n,t,o),r=!0},p(t,[o]){const a={};o&4103&&(a.$$scope={dirty:o,ctx:t}),n.$set(a)},i(t){r||(transition_in(n.$$.fragment,t),r=!0)},o(t){transition_out(n.$$.fragment,t),r=!1},d(t){destroy_component(n,t)}}}const touchmove_handler=e=>{var r;e.preventDefault();const n=e.targetTouches[0].clientX;(r=e==null?void 0:e.target)!=null&&r.scrollLeft&&(e.target.scrollLeft+=n)};function instance$1(e,n,r){let t=0,{imageUrls:o}=n,{showThumbnails:a=!1}=n;function l(){t<o.length-1?r(2,t+=1):r(2,t=0)}function c(){t>0?r(2,t-=1):r(2,t=o.length-1)}const s=f=>r(2,t=f),u=f=>r(2,t=f);return e.$$set=f=>{"imageUrls"in f&&r(0,o=f.imageUrls),"showThumbnails"in f&&r(1,a=f.showThumbnails)},[o,a,t,l,c,s,u]}class Carousel extends SvelteComponent{constructor(n){super(),init(this,n,instance$1,create_fragment$1,safe_not_equal,{imageUrls:0,showThumbnails:1})}}function create_fragment(e){let n,r,t,o,a,l,c,s,u,f,p;return{c(){n=element("div"),r=element("div"),r.textContent="Select an image layout",t=space(),o=element("div"),o.textContent="More layouts coming soon",a=space(),l=element("div"),c=element("label"),c.innerHTML='<input type="radio" name="project-type" value="Carousel" class="sr-only" aria-labelledby="project-type-0-label" aria-describedby="project-type-0-description-0 project-type-0-description-1"/> <span class="flex flex-1"><span class="flex flex-col"><span id="project-type-0-label" class="block text-sm font-medium text-gray-900">Carousel</span> <span id="project-type-0-description-0" class="mt-1 flex items-center text-sm text-gray-500">Without thumbnails. Simple pills and slider</span></span></span> <svg class="h-5 w-5 text-indigo-600" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path></svg> <span class="pointer-events-none absolute -inset-px rounded-lg border-2" aria-hidden="true"></span>',s=space(),u=element("label"),u.innerHTML='<input type="radio" name="project-type" value="carousel-thumbnails" class="sr-only" aria-labelledby="project-type-1-label" aria-describedby="project-type-1-description-0 project-type-1-description-1"/> <span class="flex flex-1"><span class="flex flex-col"><span id="project-type-1-label" class="block text-sm font-medium text-gray-900">Carousel</span> <span id="project-type-1-description-0" class="mt-1 flex items-center text-sm text-gray-500">With thumbnails</span></span></span> <svg class="h-5 w-5 text-indigo-600" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.857-9.809a.75.75 0 00-1.214-.882l-3.483 4.79-1.88-1.88a.75.75 0 10-1.06 1.061l2.5 2.5a.75.75 0 001.137-.089l4-5.5z" clip-rule="evenodd"></path></svg> <span class="pointer-events-none absolute -inset-px rounded-lg border-2" aria-hidden="true"></span>',attr(r,"class","text-base font-semibold leading-6 text-gray-900"),attr(o,"class","text-xs font-normal leading-6 text-gray-900"),attr(c,"class","relative flex cursor-pointer rounded-lg border bg-white p-4 shadow-sm focus:outline-none"),attr(u,"class","relative flex cursor-pointer rounded-lg border bg-white p-4 shadow-sm focus:outline-none"),attr(l,"class","mt-4 grid grid-cols-1 gap-y-6 sm:grid-cols-3 sm:gap-x-4"),attr(n,"class","p-4 bg-gray-50")},m(d,m){insert(d,n,m),append(n,r),append(n,t),append(n,o),append(n,a),append(n,l),append(l,c),append(l,s),append(l,u),f||(p=[listen(c,"click",e[1]),listen(c,"keydown",e[2]),listen(u,"click",e[3]),listen(u,"keydown",e[4])],f=!0)},p:noop,i:noop,o:noop,d(d){d&&detach(n),f=!1,run_all(p)}}}function instance(e){const n=createEventDispatcher();async function r(c,s,u){c.preventDefault(),await n("layout-selected",{type:s,params:u})}return[r,c=>r(c,"carousel"),c=>r(c,"carousel"),c=>r(c,"carousel",{showThumbnails:!0}),c=>r(c,"carousel",{showThumbnails:!0})]}class LayoutPicker extends SvelteComponent{constructor(n){super(),init(this,n,instance,create_fragment,safe_not_equal,{})}}var toString=Object.prototype.toString,kindOf=function(n){if(n===void 0)return"undefined";if(n===null)return"null";var r=typeof n;if(r==="boolean")return"boolean";if(r==="string")return"string";if(r==="number")return"number";if(r==="symbol")return"symbol";if(r==="function")return isGeneratorFn(n)?"generatorfunction":"function";if(isArray(n))return"array";if(isBuffer$1(n))return"buffer";if(isArguments(n))return"arguments";if(isDate(n))return"date";if(isError(n))return"error";if(isRegexp(n))return"regexp";switch(ctorName(n)){case"Symbol":return"symbol";case"Promise":return"promise";case"WeakMap":return"weakmap";case"WeakSet":return"weakset";case"Map":return"map";case"Set":return"set";case"Int8Array":return"int8array";case"Uint8Array":return"uint8array";case"Uint8ClampedArray":return"uint8clampedarray";case"Int16Array":return"int16array";case"Uint16Array":return"uint16array";case"Int32Array":return"int32array";case"Uint32Array":return"uint32array";case"Float32Array":return"float32array";case"Float64Array":return"float64array"}if(isGeneratorObj(n))return"generator";switch(r=toString.call(n),r){case"[object Object]":return"object";case"[object Map Iterator]":return"mapiterator";case"[object Set Iterator]":return"setiterator";case"[object String Iterator]":return"stringiterator";case"[object Array Iterator]":return"arrayiterator"}return r.slice(8,-1).toLowerCase().replace(/\s/g,"")};function ctorName(e){return typeof e.constructor=="function"?e.constructor.name:null}function isArray(e){return Array.isArray?Array.isArray(e):e instanceof Array}function isError(e){return e instanceof Error||typeof e.message=="string"&&e.constructor&&typeof e.constructor.stackTraceLimit=="number"}function isDate(e){return e instanceof Date?!0:typeof e.toDateString=="function"&&typeof e.getDate=="function"&&typeof e.setDate=="function"}function isRegexp(e){return e instanceof RegExp?!0:typeof e.flags=="string"&&typeof e.ignoreCase=="boolean"&&typeof e.multiline=="boolean"&&typeof e.global=="boolean"}function isGeneratorFn(e,n){return ctorName(e)==="GeneratorFunction"}function isGeneratorObj(e){return typeof e.throw=="function"&&typeof e.return=="function"&&typeof e.next=="function"}function isArguments(e){try{if(typeof e.length=="number"&&typeof e.callee=="function")return!0}catch(n){if(n.message.indexOf("callee")!==-1)return!0}return!1}function isBuffer$1(e){return e.constructor&&typeof e.constructor.isBuffer=="function"?e.constructor.isBuffer(e):!1}/*!
 * is-extendable <https://github.com/jonschlinkert/is-extendable>
 *
 * Copyright (c) 2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */var isExtendable=function(n){return typeof n<"u"&&n!==null&&(typeof n=="object"||typeof n=="function")},isObject=isExtendable,extendShallow=function(n){isObject(n)||(n={});for(var r=arguments.length,t=1;t<r;t++){var o=arguments[t];isObject(o)&&assign(n,o)}return n};function assign(e,n){for(var r in n)hasOwn(n,r)&&(e[r]=n[r])}function hasOwn(e,n){return Object.prototype.hasOwnProperty.call(e,n)}var typeOf$2=kindOf,extend=extendShallow,sectionMatter=function(e,n){typeof n=="function"&&(n={parse:n});var r=toObject(e),t={section_delimiter:"---",parse:identity},o=extend({},t,n),a=o.section_delimiter,l=r.content.split(/\r?\n/),c=null,s=createSection(),u=[],f=[];function p(v){r.content=v,c=[],u=[]}function d(v){f.length&&(s.key=getKey(f[0],a),s.content=v,o.parse(s,c),c.push(s),s=createSection(),u=[],f=[])}for(var m=0;m<l.length;m++){var _=l[m],g=f.length,h=_.trim();if(isDelimiter(h,a)){if(h.length===3&&m!==0){if(g===0||g===2){u.push(_);continue}f.push(h),s.data=u.join(`
`),u=[];continue}c===null&&p(u.join(`
`)),g===2&&d(u.join(`
`)),f.push(h);continue}u.push(_)}return c===null?p(u.join(`
`)):d(u.join(`
`)),r.sections=c,r};function isDelimiter(e,n){return!(e.slice(0,n.length)!==n||e.charAt(n.length+1)===n.slice(-1))}function toObject(e){if(typeOf$2(e)!=="object"&&(e={content:e}),typeof e.content!="string"&&!isBuffer(e.content))throw new TypeError("expected a buffer or string");return e.content=e.content.toString(),e.sections=[],e}function getKey(e,n){return e?e.slice(n.length).trim():""}function createSection(){return{key:"",data:"",content:""}}function identity(e){return e}function isBuffer(e){return e&&e.constructor&&typeof e.constructor.isBuffer=="function"?e.constructor.isBuffer(e):!1}var engines$2={exports:{}};(function(module,exports){const yaml=jsYaml,engines=module.exports;engines.yaml={parse:yaml.safeLoad.bind(yaml),stringify:yaml.safeDump.bind(yaml)},engines.json={parse:JSON.parse.bind(JSON),stringify:function(e,n){const r=Object.assign({replacer:null,space:2},n);return JSON.stringify(e,r.replacer,r.space)}},engines.javascript={parse:function parse(str,options,wrap){try{return wrap!==!1&&(str=`(function() {
return `+str.trim()+`;
}());`),eval(str)||{}}catch(e){if(wrap!==!1&&/(unexpected|identifier)/i.test(e.message))return parse(str,options,!1);throw new SyntaxError(e)}},stringify:function(){throw new Error("stringifying JavaScript is not supported")}}})(engines$2);var enginesExports=engines$2.exports,utils$3={};/*!
 * strip-bom-string <https://github.com/jonschlinkert/strip-bom-string>
 *
 * Copyright (c) 2015, 2017, Jon Schlinkert.
 * Released under the MIT License.
 */var stripBomString=function(e){return typeof e=="string"&&e.charAt(0)==="\uFEFF"?e.slice(1):e};(function(e){const n=stripBomString,r=kindOf;e.define=function(t,o,a){Reflect.defineProperty(t,o,{enumerable:!1,configurable:!0,writable:!0,value:a})},e.isBuffer=function(t){return r(t)==="buffer"},e.isObject=function(t){return r(t)==="object"},e.toBuffer=function(t){return typeof t=="string"?Buffer.from(t):t},e.toString=function(t){if(e.isBuffer(t))return n(String(t));if(typeof t!="string")throw new TypeError("expected input to be a string or buffer");return n(t)},e.arrayify=function(t){return t?Array.isArray(t)?t:[t]:[]},e.startsWith=function(t,o,a){return typeof a!="number"&&(a=o.length),t.slice(0,a)===o}})(utils$3);const engines$1=enginesExports,utils$2=utils$3;var defaults$4=function(e){const n=Object.assign({},e);return n.delimiters=utils$2.arrayify(n.delims||n.delimiters||"---"),n.delimiters.length===1&&n.delimiters.push(n.delimiters[0]),n.language=(n.language||n.lang||"yaml").toLowerCase(),n.engines=Object.assign({},engines$1,n.parsers,n.engines),n},engine=function(e,n){let r=n.engines[e]||n.engines[aliase(e)];if(typeof r>"u")throw new Error('gray-matter engine "'+e+'" is not registered');return typeof r=="function"&&(r={parse:r}),r};function aliase(e){switch(e.toLowerCase()){case"js":case"javascript":return"javascript";case"coffee":case"coffeescript":case"cson":return"coffee";case"yaml":case"yml":return"yaml";default:return e}}const typeOf$1=kindOf,getEngine$1=engine,defaults$3=defaults$4;var stringify$2=function(e,n,r){if(n==null&&r==null)switch(typeOf$1(e)){case"object":n=e.data,r={};break;case"string":return e;default:throw new TypeError("expected file to be a string or object")}const t=e.content,o=defaults$3(r);if(n==null){if(!o.data)return e;n=o.data}const a=e.language||o.language,l=getEngine$1(a,o);if(typeof l.stringify!="function")throw new TypeError('expected "'+a+'.stringify" to be a function');n=Object.assign({},e.data,n);const c=o.delimiters[0],s=o.delimiters[1],u=l.stringify(n,r).trim();let f="";return u!=="{}"&&(f=newline(c)+newline(u)+newline(s)),typeof e.excerpt=="string"&&e.excerpt!==""&&t.indexOf(e.excerpt.trim())===-1&&(f+=newline(e.excerpt)+newline(s)),f+newline(t)};function newline(e){return e.slice(-1)!==`
`?e+`
`:e}const defaults$2=defaults$4;var excerpt$1=function(e,n){const r=defaults$2(n);if(e.data==null&&(e.data={}),typeof r.excerpt=="function")return r.excerpt(e,r);const t=e.data.excerpt_separator||r.excerpt_separator;if(t==null&&(r.excerpt===!1||r.excerpt==null))return e;const o=typeof r.excerpt=="string"?r.excerpt:t||r.delimiters[0],a=e.content.indexOf(o);return a!==-1&&(e.excerpt=e.content.slice(0,a)),e};const typeOf=kindOf,stringify$1=stringify$2,utils$1=utils$3;var toFile$1=function(e){return typeOf(e)!=="object"&&(e={content:e}),typeOf(e.data)!=="object"&&(e.data={}),e.contents&&e.content==null&&(e.content=e.contents),utils$1.define(e,"orig",utils$1.toBuffer(e.content)),utils$1.define(e,"language",e.language||""),utils$1.define(e,"matter",e.matter||""),utils$1.define(e,"stringify",function(n,r){return r&&r.language&&(e.language=r.language),stringify$1(e,n,r)}),e.content=utils$1.toString(e.content),e.isEmpty=!1,e.excerpt="",e};const getEngine=engine,defaults$1=defaults$4;var parse$1=function(e,n,r){const t=defaults$1(r),o=getEngine(e,t);if(typeof o.parse!="function")throw new TypeError('expected "'+e+'.parse" to be a function');return o.parse(n,t)};const fs=require$$0,sections=sectionMatter,defaults=defaults$4,stringify=stringify$2,excerpt=excerpt$1,engines=enginesExports,toFile=toFile$1,parse=parse$1,utils=utils$3;function matter(e,n){if(e==="")return{data:{},content:e,excerpt:"",orig:e};let r=toFile(e);const t=matter.cache[r.content];if(!n){if(t)return r=Object.assign({},t),r.orig=t.orig,r;matter.cache[r.content]=r}return parseMatter(r,n)}function parseMatter(e,n){const r=defaults(n),t=r.delimiters[0],o=`
`+r.delimiters[1];let a=e.content;r.language&&(e.language=r.language);const l=t.length;if(!utils.startsWith(a,t,l))return excerpt(e,r),e;if(a.charAt(l)===t.slice(-1))return e;a=a.slice(l);const c=a.length,s=matter.language(a,r);s.name&&(e.language=s.name,a=a.slice(s.raw.length));let u=a.indexOf(o);return u===-1&&(u=c),e.matter=a.slice(0,u),e.matter.replace(/^\s*#[^\n]+/gm,"").trim()===""?(e.isEmpty=!0,e.empty=e.content,e.data={}):e.data=parse(e.language,e.matter,r),u===c?e.content="":(e.content=a.slice(u+o.length),e.content[0]==="\r"&&(e.content=e.content.slice(1)),e.content[0]===`
`&&(e.content=e.content.slice(1))),excerpt(e,r),(r.sections===!0||typeof r.section=="function")&&sections(e,r.section),e}matter.engines=engines;matter.stringify=function(e,n,r){return typeof e=="string"&&(e=matter(e,r)),stringify(e,n,r)};matter.read=function(e,n){const r=fs.readFileSync(e,"utf8"),t=matter(r,n);return t.path=e,t};matter.test=function(e,n){return utils.startsWith(e,defaults(n).delimiters[0])};matter.language=function(e,n){const t=defaults(n).delimiters[0];matter.test(e)&&(e=e.slice(t.length));const o=e.slice(0,e.search(/\r?\n/));return{raw:o,name:o?o.trim():""}};matter.cache={};matter.clearCache=function(){matter.cache={}};var grayMatter=matter;const matter$1=getDefaultExportFromCjs(grayMatter);function addImageLayoutMarkdownProcessor(e){e.registerMarkdownCodeBlockProcessor("image-layout",(n,r,t)=>{renderImageLayoutComponent(n,r,t,e)})}function renderImageLayoutComponent(e,n,r,t){var c,s;const o=parseFrontMatterBlock(e),a=getImages(o.body),l=resolveLocalImages(a,r,t);if(!((c=o.data)!=null&&c.layout)){new LayoutPicker({target:n,props:{}}).$on("layout-selected",f=>{var _;const p=o.data??{};console.log(f.detail.type),p.layout=f.detail.type,(_=f.detail.params)!=null&&_.showThumbnails&&(p.carouselShowThumbnails=!0);const d=t.app.workspace.getActiveViewOfType(obsidian.MarkdownView),m=r.getSectionInfo(n);m&&(d==null||d.editor.setSelection({line:m.lineEnd,ch:0},{line:m.lineStart+1,ch:0}),d==null||d.editor.replaceSelection(matter$1.stringify(o.body,p))),renderImageLayoutComponent(e,n,r,t)});return}if(o.data.layout==="carousel"){new Carousel({target:n,props:{imageUrls:l.length>0?l.map(u=>u.link):["https://via.placeholder.com/640x480"],showThumbnails:!!o.data.carouselShowThumbnails}});return}if(o.data.layout.startsWith("legacy-layout-")){const u=o.data.layout.charAt(o.data.layout.length-1);if(!layoutImages[u])return;new LegacyImageLayout({target:n,props:{caption:o.data.caption??"",descriptions:o.data.descriptions,layout:u,requiredImages:layoutImages[u],images:l,permanentOverlay:((s=o.data)==null?void 0:s.permanentOverlay)??t.settings.shouldOverlayPermanently}})}}const subscriber_queue=[];function writable(e,n=noop){let r;const t=new Set;function o(c){if(safe_not_equal(e,c)&&(e=c,r)){const s=!subscriber_queue.length;for(const u of t)u[1](),subscriber_queue.push(u,e);if(s){for(let u=0;u<subscriber_queue.length;u+=2)subscriber_queue[u][0](subscriber_queue[u+1]);subscriber_queue.length=0}}}function a(c){o(c(e))}function l(c,s=noop){const u=[c,s];return t.add(u),t.size===1&&(r=n(o,a)||noop),c(e),()=>{t.delete(u),t.size===0&&r&&(r(),r=null)}}return{set:o,update:a,subscribe:l}}const settings=writable({shouldOverlayPermanently:!1});class ImageLayoutsSettingsTab extends obsidian.PluginSettingTab{constructor(n,r){super(n,r),this.plugin=r}display(){const{containerEl:n}=this;n.empty(),new obsidian.Setting(n).setName("Should Overlay Permanently").setDesc("Image overlays don't require hovering").addToggle(r=>{r.setValue(this.plugin.settings.shouldOverlayPermanently).onChange(async t=>{this.plugin.settings.shouldOverlayPermanently=t,await this.plugin.saveSettings()})})}}const DEFAULT_SETTINGS={shouldOverlayPermanently:!1};class ImageLayoutsPlugin extends obsidian.Plugin{async loadSettings(){this.settings=Object.assign({},DEFAULT_SETTINGS,await this.loadData()),settings.set(this.settings)}async saveSettings(){await this.saveData(this.settings),settings.set(this.settings)}async onload(){await this.loadSettings(),this.addSettingTab(new ImageLayoutsSettingsTab(this.app,this)),addImageLayoutMarkdownProcessor(this),addLegacyImageLayoutMarkdownProcessors(this),addLegacyMasonryMarkdownProcessors(this)}onunload(){console.log("unloading plugin")}}module.exports=ImageLayoutsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
